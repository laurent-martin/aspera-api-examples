CONFIG_MK=config.mak
include $(CONFIG_MK)
UUID=743128bf-3bf3-45b5-ab14-4602c67f2950
all: .is_setup
clean:
	cd js && make clean
	cd python && make clean
	cd java && make clean
	cd web && make clean
	rm -f .is_setup $(CONFIG_TRSDK_CONFIG)
	rm -fr $(CONFIG_SDK_ROOT)
	rm -f $(CONFIG_MK) config.env
# transfer SDK is installed
.is_setup: config.env $(CONFIG_TRSDK_DIR_ARCH)/asperatransferd $(CONFIG_TRSDK_CONFIG) $(CONFIG_SDK_ROOT)/aspera_ssh_bypass_rsa.pem
	touch $@
$(CONFIG_MK): config.yaml Makefile
	@echo "# Generated by makefile, do not edit" > $(CONFIG_MK)
	@f=$$(mktemp) && echo "CONFIG_TMPDIR=$$(dirname $$f)" >> $(CONFIG_MK) && rm -f $$f
	@echo "CONFIG_PRJ_ROOT=$$(pwd -P)" >> $(CONFIG_MK)
	@echo 'CONFIG_YAML=$$(CONFIG_PRJ_ROOT)/config.yaml' >> $(CONFIG_MK)
	@echo 'CONFIG_SDK_ROOT=$$(CONFIG_PRJ_ROOT)/sdk' >> $(CONFIG_MK)
	@echo 'CONFIG_TRSDK_ROOT=$$(CONFIG_SDK_ROOT)/trsdk' >> $(CONFIG_MK)
	@case $$(uname -s)-$$(uname -m) in\
	  xDarwin-*) arch=osx-x86_64;;\
	  xLinux-x86_64) arch=linux-x86_64;;\
	  *) arch="$$(sed -n 's/^ *system_type: *//p' < config.yaml)";echo "Using $$arch from config.yaml for $$(uname -s)-$$(uname -m).";;\
	esac; echo "CONFIG_TRSDK_ARCH=$$arch" >> $(CONFIG_MK)
	@echo 'CONFIG_TRSDK_DIR_ARCH=$$(CONFIG_TRSDK_ROOT)/$$(CONFIG_TRSDK_ARCH)' >> $(CONFIG_MK)
	@echo 'CONFIG_TRSDK_DIR_GENERIC=$$(CONFIG_TRSDK_ROOT)/noarch' >> $(CONFIG_MK)
	@echo 'CONFIG_TRSDK_PROTO=$$(CONFIG_TRSDK_ROOT)/noarch/connectors/grpc/transfer.proto' >> $(CONFIG_MK)
	@echo 'CONFIG_TRSDK_CONFIG=$$(CONFIG_TRSDK_ROOT)/config.conf' >> $(CONFIG_MK)
	@echo 'CONFIG_FSMGR_DIR=$$(CONFIG_SDK_ROOT)/fspmgr' >> $(CONFIG_MK)
config.env: $(CONFIG_MK)
	sed -e 's/^C/export C/;s/(/{/g;s/)/}/g' < $(CONFIG_MK) > config.env
# start transfer SDK daemon
startdaemon: $(CONFIG_TRSDK_CONFIG)
	$(CONFIG_TRSDK_DIR_ARCH)/asperatransferd -c $(CONFIG_TRSDK_CONFIG)
stopdaemon:
	-killall asperatransferd
# generate transfer SDK config file, need utility `jq`
# see https://developer.ibm.com/apis/catalog/aspera--aspera-transfer-sdk/Configuration%20File
$(CONFIG_TRSDK_CONFIG): config.yaml sdkconf.tmpl
	jq \
'.address = "'$$(sed -n 's|.*trsdk_url.*//\([^:]*\):.*|\1|p' < config.yaml)'"'\
' | .port = '$$(sed -n 's|.*trsdk_url.*:\([0-9]*\).*|\1|p' < config.yaml)''\
' | .fasp_runtime.user_defined.bin = "'$(CONFIG_TRSDK_DIR_ARCH)'"'\
' | .fasp_runtime.user_defined.etc = "'$(CONFIG_TRSDK_DIR_GENERIC)'"'\
' | .fasp_runtime.log.dir = "'$(CONFIG_TMPDIR)'"'\
' | .fasp_runtime.log.level = 0'\
' | .log_directory = "'$(CONFIG_TMPDIR)'"'\
' | .log_level = "debug"'\
' | del(.api_time_settings, .tls, .workers, .authentication, .fasp_management, .fasp_runtime.force_version, .fasp_runtime.extra_config)'\
 sdkconf.tmpl > $@
# unlocked bypass key
$(CONFIG_SDK_ROOT)/aspera_ssh_bypass_rsa.pem: $(CONFIG_TRSDK_DIR_ARCH)/asperatransferd
	openssl rsa -passin pass:$(UUID) -in $(CONFIG_TRSDK_DIR_GENERIC)/aspera_tokenauth_id_rsa -out $(CONFIG_SDK_ROOT)/aspera_ssh_bypass_rsa.pem
# download transfer SDK
$(CONFIG_TRSDK_ROOT)/transfer_sdk.zip:
	mkdir -p $(CONFIG_TRSDK_ROOT)
	curl -L https://ibm.biz/aspera_transfer_sdk -o $(CONFIG_TRSDK_ROOT)/transfer_sdk.zip
# extract transfer SDK
$(CONFIG_TRSDK_DIR_ARCH)/asperatransferd: $(CONFIG_TRSDK_ROOT)/transfer_sdk.zip
	@echo $(CONFIG_TRSDK_DIR_ARCH)
	unzip -d $(CONFIG_TRSDK_ROOT) $(CONFIG_TRSDK_ROOT)/transfer_sdk.zip
	rm -f $(CONFIG_TRSDK_DIR_ARCH)/ascp4
	cp $(CONFIG_TRSDK_DIR_ARCH)/ascp $(CONFIG_TRSDK_DIR_ARCH)/ascp4
	echo '<product><name>IBM Aspera SDK</name><version>1.1.1.52</version></product>' > $(CONFIG_TRSDK_DIR_ARCH)/product-info.mf
	cp $(CONFIG_TRSDK_DIR_GENERIC)/aspera-license $(CONFIG_TRSDK_DIR_ARCH)
	touch $@
# create template from actual private config file
template: config.yaml
	sed '/^#/ d;s/^\(    [^:]*:\).*/\1 your_value_here/' < config.yaml > config.tmpl
config.yaml:
	@echo "Create a file: $@ from config.tmpl, refer to README.md"
	@echo "cp config.tmpl config.yaml"
	@echo "vi config.yaml"
	@exit 1
