openapi: 3.0.1
info:
  title: IBM Aspera Node API
  description: |
    API for Aspera Node Management and Transfer Support
  version: 4.4.6
servers:
- url: https://ats-aws-eu-central-1.aspera.io/
tags:
- name: /access_keys
  description: "Create and manage access keys for High-Speed Transfer Server, and\
    \ Aspera on Cloud transfer service. Access keys enable tenant-level\
    \ access control over a given storage. Use access keys for authorization if the\
    \ client application interacts with the Node API through a server application\
    \ broker. Authenticate with an access key or Node API credentials. The creator\
    \ of the access key must be authorized to access the storage path that is specified\
    \ in the access key configuration."
- name: /events
  description: "Get event activity information of a node including file transfer,\
    \ creation, modification, and deletion; file permission creation, modification,\
    \ and deletion. Authentication with Node API credentials or an access key ID\
    \ and secret allows you to see any event in the same tenant space. Bearer token \
    \ users can see any event associated with a file ID to which they have any permission."
- name: /files/{id}
  description: "Create, modify, and delete files, symbolic links, and directories\
    \ on a node. Requires access key or bearer token authentication. Bearer token\
    \ users are restricted to the tenant space that is defined in the bearer token\
    \ and by the permissions set on the files."
- name: /files/{uri_encoded_path}/contents
  description: 'List the contents of the specified file with the uri encoded path
    relative to the docroot. Content cannot be returned for symbolic links or directories.
    The maximum size being returned is 4096 bytes.'
- name: /files/browse
  description: |
    Retrieve metadata about the contents of the specified directory. Does not accept bearer token authentication; use /files/{id}/files instead.
- name: /files/page
  description: |
    Retrieve metadata about the contents of the specified directory by paging through with iteration tokens. Does not accept bearer token authentication; use /files/{id}/files instead. Available in HSTS as of version 4.0.
- name: /files/create
  description: |
    Create directories, files, and symbolic links. Does not accept bearer token authentication; use /files/{id} instead. On Unix-like OSes, if you want to allow /files/create to set the owner of the created files and directories, run the following command: 'asconfigurator -x "set_node_data;group_ownership,-"' Otherwise, when a group ID is set on a parent directory, files and directories and that are created in the parent directory by using /files/create have the primary group ID of the user rather than the group ID of the parent directory.
- name: /files/delete
  description: "Delete the specified paths and directories. Does not accept bearer\
    \ token authentication; use /files/{id} instead."
- name: /files/download_setup
  description: FASP transfers can use transfer tokens to authorize a specific download.
    Transfer tokens are the most restrictive of the tokens and require careful configuration.
- name: /files/info
  description: "Get metadata for the files and directories that are specified in an\
    \ array of paths. Does not accept bearer token authentication; use /files/{id}\
    \ instead."
- name: /files/rename
  description: "Rename the specified files and directories. Existing files and directories\
    \ cannot be overwritten by a /files/rename request. Does not accept bearer token\
    \ authentication; use /files/{id} instead."
- name: /files/search
  description: Search for objects in a specified path that match user-specified conditions
    and terms. Does not accept bearer token authentication.
- name: /files/upload_setup
  description: FASP transfers can use transfer tokens to authorize a specific upload.
    Transfer tokens are the most restrictive of the tokens and require careful configuration.
- name: /files/du
  description: Recursive size and counts of file and directory.
- name: /info
  description: Get information about the node set up and capabilities.
- name: /ops/transfers
  description: |
    Start and manage transfers between Aspera nodes including streaming transfers. Authentication with an access key or Node API credentials allows you to start a transfer of any content in the tenant space (as allowed by the storage path in the access key or, for HSTS, by the node user's file restriction or docroot). You can get information about, modify, and cancel any transfers in the same tenant space. Authentication with a bearer token restricts you to the tenant space defined by the bearer token and the permissions on the content.
- name: /permissions
  description: "Create and manage file permissions and access levels for Node API\
    \ users who authenticate with bearer tokens. Access key users, access key owners,\
    \ and other admin users have all access levels permissions. Each permission includes\
    \ a user or group ID and access levels (file actions such as list, read, and delete).\
    \ Permission access levels apply recursively and cumulatively; once a user has\
    \ a certain access level to a directory, they have at least that level of access\
    \ to all children. An access level permission allows the user to give or remove\
    \ the same permission to others."
- name: /ping
  description: Test the responsiveness of a node.
- name: /public_keys
  description: |
    Register a dynamic SSH public key for a user. This key can then be used for authenticating transfers started through SSH when using a public key for authentication. The key should be provided in OpenSSH format. Authentication is required, whether with Node API credentials, access key, or bearer token. 
- name: /self
  description: "For access key and bearer token users, get metadata for the access\
    \ key that is used to authenticate the request. Equivalent to sending a request\
    \ to /access_keys/self."
- name: /space
  description: "For High-Speed Transfer Server nodes to get the\
    \ total and available space for the file system, drives or partitions (logical\
    \ or physical) that host one or more queried paths."
- name: /usage
  description: "Retrieve usage data, as bytes transferred in, bytes transferred out,\
    \ and total, listed by usage ID. The usage ID is a user-defined tag that is configured\
    \ as part of the transfer request, either in an /ops/transfers request body or\
    \ on the ascp command line. You can also retrieve usage data for a specific usage\
    \ ID. Usage information (usage ID and bytes transferred) is not available until\
    \ the FASP transfer gracefully terminates (completes or errors). If the FASP transfer\
    \ is stopped abruptly, no usage information is retained. To get transfer rates\
    \ for a specific transfer as time series data, use /ops/transfers/bandwidth. Authentication\
    \ with Node API credentials allows you to retrieve usage for the node user. If\
    \ an access key is also provided as a query, the response is the same as for access\
    \ key authentication. Authentication with a master access key ID and secret allows\
    \ you to retrieve usage associated with the access key, including usage by all\
    \ usage IDs, aggregate usage for the access key and any sub-access keys, and usage\
    \ by access key (for sub-access keys). Authentication with a sub-access key allows\
    \ you to retrieve only usage data associated with the sub-access key (no data\
    \ by usage IDs or aggregate data). Authentication with a bearer token allows you\
    \ to retrieve usage data for the associated access key only if the bearer token\
    \ has an admin scope-role. Bearer tokens with user scope-role cannot access /usage."
paths:
  /access_keys:
    get:
      tags:
      - /access_keys
      summary: Get metadata for all access keys
      description: Get information about all access keys to which the user has access.
      security:
        - basicAuth: []
      responses:
        "200":
          description: OK - Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessKeyGETall'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
      - /access_keys
      security:
        - basicAuth: []
      summary: Create an access key
      description: Create an access key that allows the user to access the specified
        path on the HSTS node storage.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accessKeyRequest'
        required: true
      responses:
        "200":
          description: OK - Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessKeyGETMetadata'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Conflict. The access key id already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: Access Key Configuration
  /access_keys/{access_key_id}:
    get:
      tags:
      - /access_keys
      summary: Get metadata for the specified access key
      description: "Get information about an access key to which the authentication method has access, specified by access key ID."
      security:
        - basicAuth: []
      parameters:
      - name: access_key_id
        in: path
        description: The ID of the access key.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK - Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessKeyGETMetadata'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
      - /access_keys
      summary: Modify the specified access key
      security:
        - basicAuth: []
      description: Update an access key configuration with the specified values. The
        request body is the same as for a POST request and can contain all or only
        the updated element-value pairs. The access key ID cannot be updated.
      parameters:
      - name: access_key_id
        in: path
        description: The ID of the access key to modify.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accessKeyPUTRequest'
        required: true
      responses:
        "204":
          description: Success - No Content
          headers:
            Content-Length:
              description: The number of characters that are returned in the response
                body.
              schema:
                type: integer
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: Access Key Configuration
    delete:
      tags:
      - /access_keys
      security:
        - basicAuth: []
      summary: Delete the specified access key
      description: Delete the access key as well as the event and transfer history
        associated with the access key.
      parameters:
      - name: access_key_id
        in: path
        description: The ID of the access key to delete.
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Success - No Content
          headers:
            Content-Length:
              description: The number of characters that are returned in the response
                body.
              schema:
                type: integer
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /events:
    get:
      tags:
      - /events
      summary: Get event information for the node
      description: Get a full or filtered list of node events to which the user has access.
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      - name: after_time
        in: query
        description: "Get events that occurred after the specified time, in ISO format\
          \ (for example, 2015-09-11T23:53:40Z). If both \"after_time\" and \"iteration_token\"\
          \ are specified, the most recent of those two attributes is used to determine\
          \ which events are returned in the response."
        schema:
          type: string
      - name: iteration_token
        in: query
        description: Get events that occurred after the specified iteration token.
          The iteration token defines a specific time in the log; it is generated
          by a previous request and returned in the LINK header. The same iteration
          token is reported to different applications as long as they are querying
          the same server.
        schema:
          type: string
      - name: count
        in: query
        description: "Get no more than the specified number of events. If the number\
          \ of events exceed the value for \"count\", then the oldest events are returned.\
          \ Calling /events again with the returned HTTP link header returns the next\
          \ oldest set."
        schema:
          type: integer
      - name: type
        in: query
        description: "Get events that match the type and subtype. Only one \"type\"\
          \ can be specified at a time. To retrieve multiple types, use a glob pattern\
          \ as a value for \"type_glob[]\". If no types are specified, all event types\
          \ are returned. File event types are \"file.created\", \"file.deleted\"\
            , \"file.modified\", and \"file.moved\". Permission event types are \"permission.created\"\
          , \"permission.edited\", \"permission.deleted\" and \"permission.modified\".\
          \ Transfer event types are \"download.started\", \"upload.started\", \"transfer.started\"\ (returns both \"download.started\" and\ \"upload.started\"), \"download.ended\", \"upload.ended\", and \"transfer.ended\"(returns both \"download.ended\" and \"upload.ended\")."
        schema:
          type: string
      - name: "type_glob[ ]"
        in: query
        description: "Get events that match the glob pattern, in which an asterisk\
          \ (\"*\") is a wildcard for all available subtypes. Note: You can include\
          \ only  one glob pattern in a request, so if you need information for both\
          \ \"file.*\" and \"permission.*\" events, for example, you must make two\
          \ separate calls to the endpoint."
        schema:
          type: string
      responses:
        "200":
          description: OK
          headers:
            Link:
              description: A URL to the next set of items that match the current request.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events-get-200'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /events/{id}:
    get:
      tags:
      - /events
      summary: Get event information for a specific event
      description: Get the event information for a specific event. User must have
        access to the event to get information.
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The event ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events-id-get-200'
        "404":
          description: Not Found. Invalid event ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /files/{id}/files:
    get:
      tags:
      - "/files/{id}"
      summary: List metadata for files in a directory
      description: "List the metadata of files in the specified directory (IDs of\
        \ links and folders are not supported). Bearer token users must have \"list\"\
        \ permission (recursively) on the directory, and \"admin\" permissions to\
        \ view file paths."
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      - name: Accept-version
        in: header
        description: "Header 'Accept-version: 4.0' it improves the file browse performance\ without loading everything in and being able to do global sort and filter, so with this\ header, query parameters sort, min_size, max_size, min_modified_time, max_modified_time,\
          \ target_id, target_node_id, files_prefetch_count, page, name_iglob are no longer\ supported."
        schema:
          type: string
      - name: iteration_token
        in: header
        description: "The iteration token to explore the current page. For the first\
          \ page, this is not required, and the next page token will be returned in\
          \ the header 'X-Aspera-Next-Iteration-Token'. This is used when header 'Accept-version'\
          \ is present."
        schema:
          type: string
      - name: id
        in: path
        description: The ID of the folder.
        required: true
        schema:
          type: string
      - name: page
        in: query
        description: Return the metadata of files in the directory as pages and for
          the specified page number.
        schema:
          type: integer
      - name: per_page
        in: query
        description: Return the metadata for the specified number of files on each
          page.
        schema:
          type: integer
      - name: include
        in: query
        description: "Include the specified attributes in the metadata. Values are\
          \ \"access_levels\" and \"recursive_counts\"."
        schema:
          type: string
      - name: sort
        in: query
        description: "Sort the files by the specified attribute. Sortable attributes\
          \ are \"name\", \"size\", \"type\", \"modified_time\", \"recursive_folder_count\"\
          , \"recursive_link_count\", \"recursive_file_count\", or \"recursive_size\"\
          ."
        schema:
          type: string
      - name: name
        in: query
        description: Filter files by file name. Use this option to return metadata
          for a specific file.
        schema:
          type: string
      - name: name_glob
        in: query
        description: "Filter files by name using glob patterns that are case sensitive,\
          \ such as \"*.TXT\"."
        schema:
          type: string
      - name: name_iglob
        in: query
        description: "Filter files by name using glob patterns that are case insensitive,\
          \ such as \"*.txt\"."
        schema:
          type: string
      - name: min_size
        in: query
        description: "Filter files by size, returning metadata only for files that\
          \ are larger than the specified value (in bytes)."
        schema:
          type: integer
      - name: max_size
        in: query
        description: "Filter files by size, returning metadata only for files that\
          \ are smaller than the specified value (in bytes)."
        schema:
          type: integer
      - name: type
        in: query
        description: "Filter files by type. Value is \"file\", \"link\", or \"folder\"\
          ."
        schema:
          type: string
      - name: min_modified_time
        in: query
        description: "Filter files by modified time, returning metadata only for files\
          \ that were modified after the specified time. Time in ISO format."
        schema:
          type: string
      - name: max_modified_time
        in: query
        description: "Filter files by modified time, returning metadata only for files\
          \ that were modified before the specified time. Time in ISO format."
        schema:
          type: string
      - name: target_id
        in: query
        description: Filter files by target ID.
        schema:
          type: string
      - name: target_node_id
        in: query
        description: Filter files by the ID of the node on which the symbolic link
          target is located.
        schema:
          type: string
      responses:
        "200":
          description: OK
          headers:
            X-Aspera-Next-Iteration-Token:
              description: The next iteration token that can be used to explore the
                next page. This is returned when header 'Accept-version' is used.
              schema:
                type: string
            X-Aspera-Node-Cache:
              description: Information about the node cache for debugging purposes.
              schema:
                type: string
            Access-Control-Expose-Headers:
              description: "A list of access control headers that are returned in\
                \ the response. For example, X-Aspera-Node-Cache, X-Total-Count, X-Aspera-Next-Iteration-Token"
              schema:
                type: string
            X-Total-Count:
              description: "The number of items for which metadata is returned. For\
                \ example,  X-Total-Count: 2"
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/files-id-get-200'
        "400":
          description: Bad Request. Request contains a formatting or syntax error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found. Invalid file ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Conflict. File already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "503":
          description: Service Unavailable. The access key is locked for backup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
      - "/files/{id}"
      summary: "Create a file, symbolic link, or folder"
      security:
        - basicAuth: []
        - bearerAuth: []
      description: "Create a zero or non-zero byte file, symbolic link, or directory\
        \ in the directory that is specified by ID. Specify the object characteristics\
        \ in the request body. Bearer token users must have \"write\" permission (recursively)\
        \ on the directory to create files or links, and \"mkdir\" permission to create\
        \ directories. The non-zero file size is limited by max_request_file_create_size_kb\
        \ server configuration char_device_file type cannot be created."
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The file ID of the directory in which to create the item.
        required: true
        schema:
          type: string
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/files-id-files-post-request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/files-id-files-post-200'
        "400":
          description: "Bad Request. Request contains a formatting or syntax error."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found. Invalid file ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Conflict. File already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "503":
          description: Service Unavailable. The access key is locked for backup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: Request Body
  /files/{id}:
    get:
      tags:
      - "/files/{id}"
      summary: Get the metadata of a file
      description: "List the metadata of the specified file, symbolic link, or folder.\
        \ Bearer token users must have \"list\" permission (recursively) on the directory\
        \ and \"admin\" permissions to view file paths."
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      - name: Accept-version
        in: header
        description: "Header 'Accept-version: 4.0' for GET /files/{id}?ajq_id=, with this header present, the delete job status can be requested with the parameter ajq_id."
        schema:
          type: string
      - name: id
        in: path
        description: "The ID of the file, symbolic link, or directory"
        required: true
        schema:
          type: string
      - name: include
        in: query
        description: "Include the specified attributes in the metadata. Value is \"\
          access_levels\", \"permission_count\", \"recursive_counts\"."
        schema:
          type: string
      - name: ajq_id
        in: query
        description: "the delete job id from the response of DELETE /files/{id}"
        schema:
          type: string
      - name: stop
        in: query
        description: |-
          To cancel/abort a delete job: stop=cancel: request job be cancelled. Node executing job will attempt to
                  cancel job if it has not been started. Resulting status will
                  either be canceled or might end up completing if not stopped
                  in time
          stop=abort:  try to stop job even if it has started execution, leaving
                  result in an indeterminate state. Job handler may or may not
                  be written to attempt this operation. If not, it will be
                  ignored. If job has not yet started execution, job status
                  will be returned as cancelled.
        schema:
          type: string
          enum:
          - cancel
          - abort
      responses:
        "202":
          description: "With the header 'Accept-version: 4.0' present, 202 will be\
            \ returned with a response body including the job status."
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
            Content-Type:
              description: "The file type, such as `text/plain` or `application/json`."
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/files-id-get-202'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/files-id-get-200'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found. Invalid file ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Conflict. File already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "503":
          description: Service Unavailable. The access key is locked for backup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
      - "/files/{id}"
      summary: "Modify a file, symbolic link, or directory"
      description: "Rename the specified file, directory, or symbolic link. Change\
        \ the mount point status of a directory. Bearer token users must have \"rename\"\
        \ permission (recursively) on the file. Mount point status is only visible\
        \ to master access keys."
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: "The ID of the file, symbolic link, or directory."
        required: true
        schema:
          type: string
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/files-id-put-request'
        required: true
      responses:
        "204":
          description: Success - No Content
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content: {}
        "400":
          description: Bad Request
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found. Invalid file ID.
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "503":
          description: Service Unavailable. The access key is locked for backup.
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: Request body
    delete:
      tags:
      - "/files/{id}"
      summary: "Delete a file, link, or directory"
      description: "Delete the specified file, symbolic link, or directory. Bearer\
        \ token users must have \"delete\" permission (recursively) on the file."
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      - name: Accept-version
        in: header
        description: "Header 'Accept-version: 4.0' for DELETE /files/{id}, with this header\ present, the delete request will be executed in the background."
        schema:
          type: string
      - name: id
        in: path
        description: "The ID of the file, symbolic link, or directory to delete."
        required: true
        schema:
          type: string
      responses:
        "202":
          description: "With the header 'Accept-version: 4.0' present, 202 will be\
            \ returned with a response body including the job id."
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
            Content-Type:
              description: "The file type, such as `text/plain` or `application/json`."
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/files-id-delete-202'
        "204":
          description: Success - No Content
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
            Content-Type:
              description: "The file type, such as `text/plain` or `application/json`."
              schema:
                type: string
          content: {}
        "404":
          description: Not Found. Invalid file ID.
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "503":
          description: Service Unavailable. The access key is locked for backup.
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /files/{id}/content:
    get:
      tags:
      - "/files/{id}"
      summary: Get file contents
      description: List the contents of the specified file. Content cannot be returned
        for symbolic links or directories. Bearer token user must have "read" permission
        (recursively) on the file. Content cannot be returned for files that are larger
        than the configured maximum requested file creation size ("max_request_file_create_size_kb").
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The id of the file.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK.
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
            Content-Type:
              description: "The file type, such as `text/plain`."
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found. Invalid file ID.
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "503":
          description: Service Unavailable. The access key is locked for backup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /files/{uri_encoded_path}/contents:
    get:
      tags:
      - "/files/{uri_encoded_path}/contents"
      summary: Get file contents
      description: List the contents of the specified file with the uri encoded path
        relative to the docroot. Content cannot be returned for symbolic links or
        directories. The maximum size being returned is 4096 bytes.
      security:
        - basicAuth: []
      parameters:
      - name: Authorization
        in: header
        description: "Required for basic token. Value is the token string as \"Basic\
          \ {token_string}\"."
        required: true
        schema:
          type: string
      - name: uri_encoded_path
        in: path
        description: The uri encoded path of the file.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The maximum of 4096 bytes contents of the file is returned
            in the response.
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
            Content-Type:
              description: "The file type, such as `application/octet-stream`."
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: File Not Found. The path must be uri encoded.
          headers:
            Content-Type:
              description: "The content type of the response, `application/json; charset=utf-8`."
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "503":
          description: Service Unavailable. The access key is locked for backup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /files/browse:
    post:
      tags:
      - /files/browse
      summary: Browse the specified path.
      description: Retrieve metadata about the contents of the specified path.
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/filesBrowseRequest'
        required: true
      responses:
        "200":
          description: OK - Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filesBrowseResponse'
        "400":
          description: Bad Request. Request contains a formatting or syntax error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: Browse request
  /files/page:
    post:
      tags:
      - /files/page
      summary: Paging through the file set
      description: This was introduced since 4.0. It provides a new interface to page
        through the whole file set with improved performance.
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/filesPageRequest'
        required: true
      responses:
        "200":
          description: OK - Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filesPageResponse'
        "400":
          description: Bad Request. Request contains a formatting or syntax error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: Request body
  /files/create:
    post:
      tags:
      - /files/create
      summary: Create files and directories
      description: All requests to this endpoint use the same headers.
      security:
        - basicAuth: []
      requestBody:
        description: "An array of pathnames to create and the type of object (directory,\
          \ file, or symbolic link)."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/files-create-post-request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/files-create-post-200'
        "400":
          description: Bad Request. Request contains a formatting or syntax error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found. Invalid pathname.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Conflict. Path already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: Request body
  /files/delete:
    post:
      tags:
      - /files/delete
      summary: Delete file and directories
      security:
        - basicAuth: []
      requestBody:
        description: "An array of pathnames to delete. For directories, specify the\
          \ behavior for deleting non-empty directories."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/files-delete-post-request'
        required: true
      responses:
        "200":
          description: "OK. Pathnames from the request are returned. If a pathname\
            \ could not be deleted, it is followed by an error message."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/files-delete-post-200'
        "400":
          description: Bad Request. Request contains a formatting or syntax error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden. The directory cannot be deleted because it contains
            files that are in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found. The file could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Directory Not Empty. The directory is not empty and "recursive_delete"
            is set to "false".
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: Request body
  /files/download_setup:
    post:
      tags:
      - /files/download_setup
      summary: Create a download transfer token
      description: FASP transfers can use transfer tokens to authorize the transfer.
        Transfer tokens are the most restrictive of the tokens and require careful
        configuration. Token expiration is configurable on HSTS/HSTE.
      security:
        - basicAuth: []
      requestBody:
        description: The download token configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/files-download_setup-post-request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/files-download_setup-post-200'
        "400":
          description: Bad Request. Request contains a formatting or syntax error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found. Invalid pathnames.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: Request body
  /files/info:
    post:
      tags:
      - /files/info
      summary: "Get metadata for the files and directories that are specified in an\
        \ array of paths. To get file information by\
        \ using bearer token authentication, use the /files/{id} endpoint."
      security:
        - basicAuth: []
      requestBody:
        description: An array of pathnames for which to return file metadata.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/files-info-post-request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/files-info-post-200'
        "400":
          description: Bad Request. Request contains a formatting or syntax error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found. Invalid pathname.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: Request body
  /files/rename:
    post:
      tags:
      - /files/rename
      summary: Rename files and directories
      security:
        - basicAuth: []
      requestBody:
        description: "An array of pathnames, with their current and new names."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/files-rename-post-request'
        required: true
      responses:
        "200":
          description: OK. If an error occurred performing the rename operation for a specific path, the error is returned as part of the response element for that path.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/files-rename-post-200'
        "400":
          description: Bad Request. Request contains a formatting or syntax error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: Request body
  /files/search:
    post:
      tags:
      - '/files/search '
      summary: Search the file system
      security:
        - basicAuth: []
      requestBody:
        description: "The search specifications, including the base path, number of\
          \ items to return, and filters."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/files-search-post-request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/files-search-post-200'
        "400":
          description: Bad Request. Request contains a formatting or syntax error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found. Invalid pathname.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: Request body
  /files/upload_setup:
    post:
      tags:
      - /files/upload_setup
      summary: Create an upload transfer token
      description: "FASP transfers can use transfer tokens to authorize the transfer.\
        Transfer tokens are the most restrictive of the tokens and require careful\
        configuration. Token expiration is configurable on HSTS/HSTE. \
        Note: Transfer specifications that are set in aspera.conf overwrite the \
        corresponding values in the request body when the token is created."
      security:
        - basicAuth: []
      requestBody:
        description: The upload token configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/files-upload_setup-post-request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/files-upload_setup-post-200'
        "400":
          description: Bad Request. Request contains a formatting or syntax error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found. Invalid pathnames.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: Request body
  /files/du:
    post:
      tags:
      - /files/du
      summary: Get information about size and counts of files and directories.
      description: "Recursive size and counts of files and directories."
      security:
        - basicAuth: []
      requestBody:
          description: The request body with a path.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filesDuRequest'
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/files-du'
  /info:
    get:
      tags:
      - /info
      summary: Get information about the node configuration
      description: "List information about the node configuration, including the version\
        \ of the Aspera software, licensed features, the node ID and cluster ID, and\
        \ requirements for the transfer specification, such as content protection\
        \ or minimum cipher for encryption of data in transit."
      security:
        - basicAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/info-get-200'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /ops/transfers:
    get:
      tags:
      - /ops/transfers
      summary: Get Information about transfers (all or filtered)
      description: "Retrieve information about transfers to which you have access.\
        \ The response can be filtered and sorted. To retrieve information about transfers\
        \ that were started with Faspex or the Connect Server web UI, use the Reliable\
        \ Query API. To retrieve bandwidth data, use /ops/transfers/bandwidth."
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      - name: Origin
        in: header
        description: Use this header to simulate CORS and permit access to the specified
          HTTP resource. The response includes headers to support CORS.
        schema:
          type: string
      - name: after_time
        in: query
        description: Get transfers for which at least one event happened (sessions
          in progress or terminated) after the specified time. Value is time in ISO
          format %Y-%m-%dT%H:%M:%SZ.
        example: after_time=2022-11-30T15:00:00Z
        schema:
          type: string
      - name: iteration_token
        in: query
        description: Get transfers after the specified iteration token. The iteration
          token defines a specific time in the log; it is generated by a previous
          request and returned in the LINK header. The same iteration token is reported
          to different applications as long as they are querying the same server.
        schema:
          type: string
      - name: count
        in: query
        description: "Get no more than the specified number of transfers. If the number\
          \ of transfers exceeds count, then the oldest count of transfer events are\
          \ returned. Querying /ops/transfers again with the returned HTTP link header\
          \ returns the next oldest set."
        schema:
          type: integer
      - name: max_items
        in: query
        description: "Overrides the aspera.conf option <max_response_entries>, which\
          \ limits the number of files that can be reported across sessions."
        schema:
          type: integer
      - name: active_only
        in: query
        description: "If true, get only running transfers (waiting or running). If\
          \ false, get only transfers that are not running (completed or failed)."
        schema:
          type: boolean
      - name: direction
        in: query
        description: Get only transfers that are going in the specified direction.
          Value is "send" or "receive".
        schema:
          type: string
      - name: tag
        in: query
        description: |
          Filter transfers by tag. The value can use the format {key}[,{keys}...] or {key}[,{keys}...]={value}. For example, to return all transfers that have "xfer_retry" set to 10 in the tags value ("tags":{"aspera":{"xfer_retry":10}}), use "tag=aspera.xfer_retry%3D10" (where "%3D" is URL-encoded "="). To return transfers that are started with an access key (so the transfer specification includes "tags":{"aspera":{"node":{"access_key":"{access_key_id}"}}}), use "tag=aspera.node.access_key". To return transfers that are started with a specific access key, use "tag=aspera.node.access_key%3D{access_key_id}".
        schema:
          type: string
      - name: view
        in: query
        description: |
          Return only the specified information. Allowed values are "id" (Return only the transfer session IDs), "short_summary" (Show an abbreviated summary and session information, but do not report file data), or "summary" (Show the full summary and session information, but do not report file data).
        schema:
          type: string
      - name: access_key
        in: query
        description: Get transfers that are authorized by the specified access key.
          This option is only allowed with node user authentication.
        schema:
          type: string
      responses:
        "200":
          description: OK - Successful response
          headers:
            Access-Control-Expose-Headers:
              description: "If the request included an \"Origin\" header, value is\
                \ \"Link\"."
              schema:
                type: string
            Access-Control-Allow-Origin:
              description: "If the request included an \"Origin\" header, the resource\
                \ specified in that header."
              schema:
                type: string
            Link:
              description: A URL to the next set of items that match the current request.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/transferResponseSessionSpec'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
      - /ops/transfers
      summary: Start a new transfer
      description: Start a transfer between the local node (the node receiving the
        Node API request) and a remote node that uses the transfer specifications
        that are contained in the request body
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      security:
        - basicAuth: []
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transferPostRequest'
        required: true
      responses:
        "200":
          description: OK - Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transferResponseSpec'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: Transfer Request
  /ops/transfers/{transfer_id}:
    get:
      tags:
      - /ops/transfers
      summary: Get information about a specific transfer.
      description: Retrieve information about a specific transfer to which you have
        access and that was started by using the Node API.
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      - name: transfer_id
        in: path
        description: The ID of the transfer for which to report metadata.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK - Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transferResponseSessionSpec'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
      - /ops/transfers
      summary: Modify a transfer.
      description: "Modify the transfer specification of an active transfer, specified\
        \ by transfer ID, by submitting a partial or complete request body that contains\
        \ the values."
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      - name: transfer_id
        in: path
        description: The ID of the transfer for which to report metadata.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transferPutRequest'
        required: true
      responses:
        "200":
          description: OK - Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transferResponseSpec'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: Put Request
    delete:
      tags:
      - /ops/transfers
      summary: "Cancel a transfer. Must use HTTP CANCEL action, not DELETE."
      description: "Cancel a transfer. Use CANCEL instead of DELETE. The user must\
        \ have access to the transfer and the transfer must be started by a Node API\
        \ request. This is a shortcut to a PUT /ops/transfers/{id} request that has\
        \ { \"status\" : \"canceled\" } as the request payload."
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      - name: transfer_id
        in: path
        description: The ID of the transfer for which to report metadata.
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Success - No Content
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content: {}
        "400":
          description: Bad Request.
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found.
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "503":
          description: Service Unavailable
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /ops/transfers/bandwidth:
    get:
      tags:
      - /ops/transfers
      summary: Get bandwidth usage data for all transfers.
      description: Retrieve time series data on transfer rates for all transfers to
        which the user has access.
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      - name: duration
        in: query
        description: "Get bandwidth data for the specified number of seconds at the\
          \ start of each transfer. Default is 600, maximum is 3600."
        schema:
          type: integer
      - name: start_time
        in: query
        description: Get bandwidth data for transfers after the specified time. Time
          is specified in ISO format.
        schema:
          type: string
      responses:
        "200":
          description: OK - Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bandwidthResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /permissions:
    get:
      tags:
      - /permissions
      summary: Get permissions information
      description: Get information about permissions and optionally filter the response.
        Sub-access key users cannot view permissions.
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      - name: file_id
        in: query
        description: "Get all permissions, including inherited (recursive) permissions,\
          \ for the file ID. Requires any permission (recursively) on the file. The\
          \ response includes only permissions that apply to the user, unless the\
          \ user has any permissions on the root file, in which case all permission\
          \ are returned."
        schema:
          type: string
      - name: inherited
        in: query
        description: Use with "file_id" to retrieve all permissions with or without
          inherited (recursive) permissions. Requires any permission (recursively)
          on the file.
        schema:
          type: boolean
      - name: access_type
        in: query
        description: "Use with \"access_id\" to retrieve all permissions for the given\
          \ access ID. Value is \"user\" or \"group\". Returns permission information\
          \ only if the user is the access ID or has any permissions to the root file.\
          \ Otherwise, filters permissions by access ID."
        schema:
          type: string
      - name: access_id
        in: query
        description: "Use with \"access_type\" to retrieve all permissions for the\
          \ given access ID. Returns permission information only if the user is the\
          \ access ID or has any permissions to the root file. Otherwise, filters\
          \ permissions by access ID."
        schema:
          type: string
      - name: created_by_id
        in: query
        description: "Retrieve all permissions for the given ID. Returns permission\
          \ information only if the user is the created by ID or has any permissions\
          \ to the root file. Otherwise, filters permissions by created by ID and\
          \ excludes inherited permissions."
        schema:
          type: string
      - name: page
        in: query
        description: Return the permissions as pages. Use with "per_page" to set the
          number of permissions returned per page.
        schema:
          type: integer
      - name: per_page
        in: query
        description: Return the specified number of permissions per page.
        schema:
          type: integer
      - name: "embed[]"
        in: query
        description: Embed the file metadata in the response. Value is "file".
        schema:
          type: string
      - name: "access_levels[]"
        in: query
        description: "Filter permissions by access levels. Value is \"list\", \"read\"\
          , \"write\", \"delete\", \"mkdir\", \"rename\", or \"preview\". Filter by multiple access levels by using multiple queries."
        schema:
          type: string
      - name: access_level
        in: query
        description: Filter permissions by access level. Value is "edit" or "view".
        schema:
          type: string
      - name: last_updated_by_id
        in: query
        description: Filter permissions by "last_updated_by_id" and exclude inherited
          permissions.
        schema:
          type: string
      - name: tags
        in: query
        description: Filter permissions by tag and exclude inherited permissions.
          Value has the format *tag_id*(*tag_value*).
        schema:
          type: string
      responses:
        "200":
          description: OK
          headers:
            Access-Control-Expose-Headers:
              description: "A list of access control headers that are returned in\
                \ the response. For example, Access-Control-Expose-Headers: X-Total-Count"
              schema:
                type: string
            X-Total-Count:
              description: "The number of items for which metadata is returned. For\
                \ example,  X-Total-Count: 2"
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permissions-get-200'
        "400":
          description: Bad Request. Request contains a formatting or syntax error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
      - /permissions
      summary: Create a permission
      description: Apply permissions to a file or directory for a specific user. Accessible
        only if the user has any permission (recursively) on the associated file.
        Sub-access key users cannot create or view permissions.
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      requestBody:
        description: Request schema
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/permissions-post-request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permissions-post-200'
        "400":
          description: Bad Request. Request contains a formatting or syntax error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden. The user does not have access_id to create a permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Conflict. The permission already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: Request body
  /permissions/{id}:
    get:
      tags:
      - /permissions
      summary: Get permissions information for a specific permission
      description: "Get information about a specific permission by permission ID.\
        \ Accessible only if the user created the permission, is the target of the\
        \ permission, or has any permission (recursively) on the associated file.\
        \ Sub-access key users cannot view permissions."
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The permission ID
        required: true
        schema:
          type: string
      - name: "embed[]"
        in: query
        description: Embed the file metadata in the response. Value is "file".
        schema:
          type: string
      responses:
        "200":
          description: OK
          headers:
            X-Total-Count:
              description: "The number of items for which metadata is returned. For\
                \ example,  X-Total-Count: 2"
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permissions-id-get-200'
        "400":
          description: Bad Request. Request contains a formatting or syntax error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found. Invalid permission ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
      - /permissions
      summary: Modify a permission
      description: "Modify the access levels or tags associated with a permission.\
        \ A user can modify permissions on a file only if they were the creator or\
        \ have any permissions (recursively) on the file. Only the access levels or\
        \ tags can be modified. To change other settings, delete the permission and\
        \ recreate it with the new values."
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The permission ID
        required: true
        schema:
          type: string
      requestBody:
        description: Request schema
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/permissions-id-put-request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permissions-post-200'
        "400":
          description: Bad Request. Request contains a formatting or syntax error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden. The user does not have access_id to create a permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found. Invalid permission ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Conflict. The permission already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: PutRequestSchema
    delete:
      tags:
      - /permissions
      summary: Delete a permission
      description: "Delete a permission, specified by permission ID."
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The permission ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content: {}
        "400":
          description: Bad Request. Request contains a formatting or syntax error.
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden. The user does not have access_id to create a permission.
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not Found. Invalid permission ID.
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Conflict. The permission already exists.
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permissions-id-delete-409'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          headers:
            Content-Length:
              description: "The size of the response body, in bytes."
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /ping:
    get:
      tags:
      - /ping
      summary: Test the responsiveness of a node
      description: Send a request to the node to confirm that it is connected and
        responsive.
      security:
        - basicAuth: []
      responses:
        "200":
          description: OK. No Content.
          content: {}
        "500":
          description: Internal Server Error.
          content: {}
  /public_keys:
    post:
      tags:
        - /public_keys
      summary: Register a dynamic public key to the server.
      description: Register a dynamic public key to the server for user authentication.
      security:
        - basicAuth: []
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/publicKeyRequest'
      responses:
        '201':
          description: Public key registered successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicKeyResponse'
        '400':
          description: Invalid request payload.
        '500':
          description: Internal server error.
  /self:
    get:
      tags:
      - /self
      summary: Get access key metadata.
      description: "Get metadata, including ID and storage path, for the access key\
        \ that is associated with the basic token or bearer token that is used to\
        \ authenticate the request."
      security:
        - basicAuth: []
        - bearerAuth: []
      responses:
        "200":
          description: OK - Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessKeyGETMetadata'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /space:
    post:
      tags:
      - /space
      summary: Get space information for the file system
      description: "Get the total and available space for the file system, drives\
        \ or partitions (logical or physical) that host one or more queried paths."
      requestBody:
        description: The request body with an array of paths.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/space-post-request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/space-post-200'
        "400":
          description: Bad Request. Request contains a formatting or syntax error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal Server Error. The server configuration is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: Request body
  /usage:
    get:
      tags:
      - /usage
      summary: Get all usage data
      description: "Retrieve usage information, as allowed by the authentication method."
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      - name: access_key
        in: query
        description: "When authenticating with Node API credentials, retrieve usage\
          \ data for the specified access key."
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usage-get-200'
        "400":
          description: Bad Request. Request contains a formatting or syntax error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Event logging is not enabled on the server or the usage ID
            is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /usage/{id}:
    get:
      tags:
      - /usage
      summary: Get usage data for a specific usage id
      description: "Retrieve usage information for a specific usage ID, as allowed\
        \ by the authentication method."
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
      - name: X-Aspera-AccessKey
        in: header
        description: Required only for bearer token authorization. The access key
          ID used to create the bearer token; value is the access key ID.
        schema:
          type: string
      - name: Authorization
        in: header
        description: "Required for basic token or bearer token authorization. Value\
          \ is the token string as \"Basic {token_string}\" or \"Bearer {token_string}\"\
          ."
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The usage ID.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usage-id-get-200'
        "400":
          description: Bad Request. Request contains a formatting or syntax error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Event logging is not enabled on the server or the usage ID
            is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
components:
  schemas:
    accessKeyRequest:
      required:
      - storage
      type: object
      properties:
        id:
          type: string
          description: "The access key ID. If no value is provided, the Node API creates\
            \ one."
        secret:
          type: string
          description: The access key secret.
        token_verification_key:
          type: string
          description: "Required when the access key is used to create a bearer token,\
            \ the public key corresponding to the private key that is used to create\
            \ the bearer token."
          example: '-----BEGIN PUBLIC KEY-----\r\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDMLkM2xiSPWjj4NxBHUa0m2ZAm\r\niog3JM3VEMW6rhE6LUtXM1KxRawih5pyD8OuGOAUTZmw7mnL3Cbebdzmc+CuqEkS\r\nkFJrYWCzNgQcRxc9v+XKk0YN8BZvMDmrSInmNQ5TPfG3sz4KJcf9QMJ\/TsR3rfns\r\nRYar\/IDoOTbgJgGQkwIDAQAB\r\n-----END
            PUBLIC KEY-----'
        license:
          $ref: '#/components/schemas/accessKeyLicense'
        storage:
          $ref: '#/components/schemas/accessKeyStorageRequest'
        configuration:
          $ref: '#/components/schemas/accessKeyConfiguration'
    accessKeyStorageRequest:
      allOf:
      - $ref: '#/components/schemas/accessKeyStorageResponse'
      - type: object
        properties:
          credentials:
            $ref: '#/components/schemas/accessKeycreds'
    accessKeyStorageResponse:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: "The storage type. Use the value corresponding to the storage\
            \ type. For local storage, set to \"local\". For Amazon S3, set to \"\
            aws_s3\". For Azure Block and Page, set to \"azure\". For Azure SAS, set\
            \ to \"azure_sas\". For Azure Files, set to \"azure-files\". For Google\
            \ Cloud Storage, set to \"google-gcs\". For IBM Cloud Object Storage (COS)\
            \ S3, set to \"ibm-s3\". If the storage type is any type other than \"\
            local\", \"credentials\" is required."
        bucket:
          type: string
          description: |
            Required for Amazon S3 or IBM COS S3, the storage bucket.
        endpoint:
          type: string
          description: |
            Required for Amazon S3 and IBM COS S3, the authentication endpoint.
        container:
          type: string
          description: |
            The Azure storage container. Required for Azure Block, Azure Page, and Azure SAS.
        path:
          type: string
          description: |
            The path to which the user has access. For local storage - the local storage path; required if the access key is used to start transfers with /ops/transfers. For Amazon S3 - the path within the bucket (optional). For Azure Block, Page, and SAS - the path within the container (optional). For Google Cloud Storage - the bucket and path within the storage endpoint. The bucket is required, the path is optional. For IBM Cloud Object Storage (COS) S3 - the path within the bucket (optional).
        storage_endpoint:
          type: string
          description: |
            Required for Azure Block and Azure Page storage, the authentication endpoint.
        storage_class:
          type: string
          description: "For Amazon S3 storage, the type of storage. Value is \"STANDARD\"\
            , \"REDUCED_REDUNDANCY\", \"INFREQUENT_ACCESS\", \"ONEZONE_IA\", \"INTELLIGENT_TIERING\"\
            , \"GLACIER\", \"DEEP_ARCHIVE\", \"OUTPOSTS\" or \"GLACIER_IR\". Default\
            \ is \"STANDARD\"."
        server_side_encryption:
          type: string
          description: |
            For Amazon S3 storage, specify the type of server-side encryption if it is enabled on the storage. Value is "AES256" or "AWS_KMS". If "AWS_KMS", "server_side_encryption_aws_kms_key_id" is required.
        server_side_encryption_aws_kms_key_id:
          type: string
          description: |
            Required for Amazon S3 storage with "AWS_KMS" server-side encryption, the ARN of the encryption key. For example, "arn:aws:kms:us-east-1:648543846928:key/er23525-8754-84g4-8sf7-4834ngigfre45"
          example: arn:aws:kms:us-east-1:648543846928:key/er23525-8754-84g4-8sf7-4834ngigfre45
        api:
          type: string
          description: |
            Required for Azure Block, Page, and SAS, the storage API. Value is "BLOCK" or "PAGE".
        max_segments_per_compose:
          type: integer
          description: |
            Required for Google Cloud Storage, the maximum number of compose parts, which enable high-speed transfer with the storage. Set to 10000.
    accessKeycreds:
      type: object
      properties:
        type:
          type: string
          description: |
            Required for Amazon S3, Azure Block and Page, Google Cloud Storage, and IBM COS S3 storage. The type of access credentials provided. For Amazon S3 storage, the value is "key" (requires values for "access_key_id" and "secret_access_key"), "iam-role" (requires a value for "iam_role_name"), or "assume-role" (requires values for "assume_role_arn", "assume_role_external_id", and "assume_role_session_name"). For Azure Block and Page storage, the value must be "key". For Google Cloud Storage, the value is "service_account"; "service_account" with a private key requires "private_key" and "client_email", "oauth" requires "client_id", "client_secret", "access_token", "oauth" , "refresh_token", "auth_uri", "token_uri", "auth_provider_x509_cert_url", and "client_x509_cert_url". For IBM COS S3 storage, the value must be "key".
        access_key_id:
          type: string
          description: |
            Required for Amazon S3 storage with "key" authentication and IBM COS S3 storage, the access key ID.
        secret_access_key:
          type: string
          description: |
            Required for Amazon S3 storage with "key" authentication and IBM COS S3 storage, the access key secret.
        iam_role_name:
          type: string
          description: |
            Required for Amazon S3 storage with "iam-role" authentication, the IAM role name.
        assume_role_arn:
          type: string
          description: |
            Required for Amazon S3 storage with "assume-role" authentication, the assume role ARN, with the following format
              "arn:aws:iam::{your_aws_account_id}:role/{role_name}
        assume_role_external_id:
          type: string
          description: |
            Required for Amazon S3 storage with "assume-role" authentication, the assume role external ID.
        assume_role_session_name:
          type: string
          description: |
            For Amazon S3 storage with "assume-role" authentication, the assume role session name. Optional.
        account:
          type: string
          description: |
            Required for Azure Block and Page storage, the account name.
        key:
          type: string
          description: |
            Required for Azure Block and Page storage, the storage access key.
        shared_access_signature:
          type: string
          description: |
            Required for Azure SAS storage, the shared URL.
        file_service_endpoint:
          type: string
          description: |
            Required for Azure Files storage, the file service endpoint, with the following format "https://{account}.file.core.windows.net/"
        password:
          type: string
          description: |
            Required for Azure Files storage, the password for the service endpoint.
        project_id:
          type: string
          description: |
            Required for Google Cloud Storage, the project ID.
        private_key_id:
          type: string
          description: |
            For Google Cloud Storage, the private key ID. Optional.
        private_key:
          type: string
          description: |
            Required for Google Cloud Storage with "service_account" authentication, the private key string with the format
            `------BEGIN PRIVATE KEY------{key_string}------END PRIVATE KEY-----`
        client_email:
          type: string
          description: |
            Required for Google Cloud Storage with "service_account" authentication, the client email with the format "{client_id}@developer.gserviceaccount.com"
        client_id:
          type: string
          description: |
            Required for Google Cloud Storage with "oauth" authentication, the client ID.
        client_secret:
          type: string
          description: |
            Required for Google Cloud Storage with "oauth" authentication, the client secret.
        access_token:
          type: string
          description: |
            Required for Google Cloud Storage with "oauth" authentication, the access token.
        refresh_token:
          type: string
          description: |
            For Google Cloud Storage with "oauth" authentication, the refresh token. Optional. Required only if you want to be able to refresh the access token when it expires.
        token_expiration:
          type: integer
          description: |
            Required for Google Cloud Storage with "oauth" authentication, the number of seconds until the token expires.
        auth_uri:
          type: string
          description: |
            Required for Google Cloud Storage with "oauth" authentication, the authentication URL "https://accounts.google.com/o/oauth2/auth".
        token_uri:
          type: string
          description: |
            Required for Google Cloud Storage with "oauth" authentication, the token authentication URL "https://accounts.google.com/o/oauth2/token".
        auth_provider_x509_cert_url:
          type: string
          description: |
            Required for Google Cloud Storage with "oauth" authentication, the URL for the authentication provider x509 certs.
        client_x509_cert_url:
          type: string
          description: |
            Required for Google Cloud Storage with "oauth" authentication, the URL for the client x509 certs with the format "https:www.googleapis.com/robot/v1/metadata/x509/{client_id}%40developer.gserviceaccount.com"
    accessKeyGETall:
      type: array
      description: An array of access key metadata.
      items:
        $ref: '#/components/schemas/accessKeyGETMetadata'
    accessKeyGETMetadata:
      type: object
      properties:
        id:
          type: string
          description: The access key ID.
        root_file_id:
          type: string
          description: The ID of the root file (the topmost storage) of the access
            key.
        token_verification_key:
          type: string
          description: A token key that is configured on the node and used to authenticate
            token bearers.
        license:
          $ref: '#/components/schemas/accessKeyLicense'
        storage:
          $ref: '#/components/schemas/accessKeyStorageResponse'
        configuration:
          $ref: '#/components/schemas/accessKeyConfiguration'
    accessKeyLicense:
      type: object
      properties:
        customer_id:
          type: string
          description: The customer ID.
        entitlement_id:
          type: string
          description: The entitlement ID.
    accessKeyConfiguration:
      type: object
      properties:
        transfer:
          $ref: '#/components/schemas/accessKeyConfigTransfer'
        server:
          $ref: '#/components/schemas/accessKeyConfigServer'
    accessKeyPUTConfiguration:
      type: object
      properties:
        transfer:
          $ref: '#/components/schemas/accessKeyPUTConfigTransfer'
        server:
          $ref: '#/components/schemas/accessKeyConfigServer'
    accessKeyConfigTransfer:
      type: object
      properties:
        aggressiveness:
          maximum: 1
          minimum: 0
          type: number
          description: The aggressiveness of transfers that are authorized by this
            access key in claiming available bandwidth. Value is 0.00-1.00.
          format: double
        bandwidth_flow_network_rc_module:
          type: string
          description: "Incoming/Outgoing Rate Control Module, values can be delay,\
            \ delay-odp, delay-adv or delay-laq."
          enum:
          - delay
          - delay-odp
          - delay-adv
          - delay-laq
        byok_enabled:
          type: boolean
          description: "If true, the Bring Your Own Key is enabled. This is introduced\
            \ in HSTS 4.0."
        cipher:
          type: string
          description: "The encryption mode and minimum cipher key length allowed\
            \ by the server for transfers that are authorized by this access key.\
            \ Value is \"none\", \"aes-128\", \"aes-192\", \"aes-256\". Default is\
            \ unset, such that the transfer authorized by the access key must respect\
            \ the server configuration."
          enum:
          - aes-128
          - aes-192
          - aes-256
        content_protection_secret:
          type: string
          description: "Provide a server side enryption at rest secret. Files transfered\
            \ with server side encryption at rest are automatically encrypted on upload\
            \ and decrypted on download. This secret can not be changed via PUT. If\
            \ you need capabilities to rotate passwords, then consider the BYOK option\
            \ or one of the customer provided encryption key options from an object\
            \ storage provider."
        file_checksum_type:
          type: string
          description: "The type of checksum reporting to perform on each file transfered.\
            \ Value is \"none\", \"md5\", \"sha1\", \"sha-256\", \"sha-384\", \"sha-512\"\
            . Default is unset, such that the transfer will not report file checksums\
            \ unless the remote server is configured to report file checksums."
          enum:
          - none
          - md5
          - sha1
          - sha-256
          - sha-384
          - sha-512
        policy:
          type: string
          description: "The policy allowed for transfers that are authorized by this\
            \ access key. Value is \"high\", \"fair\", \"low\". If unset the default\
            \ is fair."
          enum:
          - fair
          - high
          - low
        preserve_timestamps:
          type: boolean
          description: "If true, preserve file access and modification timestamps\
            \ for transfers that are authorized by this access key. The server configuration\
            \ overrides the access key configuration. Timestamp support in object\
            \ storage varies by provider; consult your object storage documentation\
            \ to determine which settings are supported. Default is unset, such that\
            \ the access key inherits the server configuration."
        target_rate_kbps:
          type: integer
          description: "The default initial rate for transfers that are authorized\
            \ by this access key, in kilobits per second."
        target_rate_cap_kbps:
          type: integer
          description: "The maximum target rate for transfers that are authorized\
            \ by this access key, in kilobits per second."
        token_encryption_key:
          type: string
          description: The secret key being used to generate tokens.
        client_password_requirements:
          type: object
          description: |
            Password complexity requirements for client-side encryption passphrases.
            This setting overrides the aspera.conf option `require_strong_ear_pass`.
            - Minimum requirements:
              - Minimum length: 6 characters
              - At least 1 special character
              - At least 1 digit
              - At least one uppercase or one lowercase letter
          properties:
            min_length:
              type: integer
              description: Minimum total password length. Must be between 6 and the `max_length`.
              example: 8
            max_length:
              type: integer
              description: Maximum total password length. Must be between 6 and 1024.
              example: 64
            min_uppercase_count:
              type: integer
              description: Minimum number of uppercase letters required in the password.
              example: 1
            min_lowercase_count:
              type: integer
              description: Minimum number of lowercase letters required in the password.
              example: 1
            min_digit_count:
              type: integer
              description: Minimum number of numeric digits required in the password.
              example: 1
            min_special_count:
              type: integer
              description: Minimum number of special characters required in the password.
              example: 1
    accessKeyPUTConfigTransfer:
      type: object
      properties:
        aggressiveness:
          maximum: 1
          minimum: 0
          type: number
          description: The aggressiveness of transfers that are authorized by this
            access key in claiming available bandwidth. Value is 0.00-1.00.
          format: double
        bandwidth_flow_network_rc_module:
          type: string
          description: "Incoming/Outgoing Rate Control Module, values can be delay,\
            \ delay-odp, delay-adv or delay-laq."
          enum:
          - delay
          - delay-odp
          - delay-adv
          - delay-laq
        byok_enabled:
          type: boolean
          description: "If true, the Bring Your Own Key is enabled. This is introduced\
            \ in HSTS 4.0."
        cipher:
          type: string
          description: "The encryption mode and minimum cipher key length allowed\
            \ by the server for transfers that are authorized by this access key.\
            \ Value is \"none\", \"aes-128\", \"aes-192\", \"aes-256\". Default is\
            \ unset, such that the transfer authorized by the access key must respect\
            \ the server configuration."
          enum:
          - aes-128
          - aes-192
          - aes-256
        file_checksum_type:
          type: string
          description: "The type of checksum reporting to perform on each file transfered.\
            \ Value is \"none\", \"md5\", \"sha1\", \"sha-256\", \"sha-384\", \"sha-512\"\
            . Default is unset, such that the transfer will not report file checksums\
            \ unless the remote server is configured to report file checksums."
          enum:
          - none
          - md5
          - sha1
          - sha-256
          - sha-384
          - sha-512
        policy:
          type: string
          description: "The policy allowed for transfers that are authorized by this\
            \ access key. Value is \"high\", \"fair\", \"low\". If unset the default\
            \ is fair."
          enum:
          - fair
          - high
          - low
        preserve_timestamps:
          type: boolean
          description: "If true, preserve file access and modification timestamps\
            \ for transfers that are authorized by this access key. The server configuration\
            \ overrides the access key configuration. Timestamp support in object\
            \ storage varies by provider; consult your object storage documentation\
            \ to determine which settings are supported. Default is unset, such that\
            \ the access key inherits the server configuration."
        target_rate_kbps:
          type: integer
          description: "The default initial rate for transfers that are authorized\
            \ by this access key, in kilobits per second."
        target_rate_cap_kbps:
          type: integer
          description: "The maximum target rate for transfers that are authorized\
            \ by this access key, in kilobits per second."
        token_encryption_key:
          type: string
          description: The secret key being used to generate tokens.
    accessKeyConfigServer:
      type: object
      properties:
        activity_event_logging:
          type: boolean
          description: "If true, allow the Node API to query transfers that are associated\
            \ with this access key through the /events endpoint. The access key configuration\
            \ overrides the server configuration. This option must be enabled for\
            \ event reporting to IBM Aspera on Cloud. Default is unset, such that\
            \ the access key inherits the server configuration."
        recursive_counts:
          type: boolean
          description: "If true, enable recursive counts. This option must be enabled\
            \ for event reporting to IBM Aspera on Cloud. The access key configuration\
            \ overrides the server configuration. Default is unset, such that the\
            \ access key inherits the server configuration."
        aej_logging:
          type: boolean
          description: "If true, enable reporting to the IBM Aspera on Cloud Activity\
            \ app. The access key configuration overrides the server configuration.\
            \ Default is unset (access key inherits the value set in the server's\
            \ aspera.conf)."
        activity_files_max:
          type: number
          description: Maximum number of files to log per transfer via the reporting
            engine. This is introduced in HSTS 4.0.
        access_key_credentials_encryption_type:
          type: string
          description: "The encryption algorithm to encrypt the storage credential,\
            \ content_protection_secret and token_encryption_key, currently aes-128-gcm\
            \ is supported. This is introduced in HSTS 4.0."
        wss_enabled:
          type: boolean
          description: "If true, enable the web socket transfer service. This is introduced\
            \ in HSTS 4.0."
        ftsearch:
          type: boolean
          description: "If true, enable ftsearch. This was introduced\
            \ in HSTS 4.4.5."
        activity_transfer_ignore_skipped_files:
          type: boolean
          description: "If true, skipped files won't be reported in the /ops/transfers endpoint.\
            \ This is introduced in HSTS 4.0."
        activity_file_event_logging:
          type: boolean
          description: If true, files activity events will be reported in the /events endpoint.
        allow:
          type: array
          description: IP address ranges that are allowed to access/interact with the Node API. Use CIDR address notation.
          items:
            type: string
        deny:
          type: array
          description: IP address ranges that are not allowed to access/interact with the Node API. Use CIDR address notation.
          items:
            type: string
    accessKeyPUTRequest:
      type: object
      properties:
        secret:
          type: string
          description: The access key secret.
        token_verification_key:
          type: string
          description: A token key that is configured on the node and used to authenticate
            token bearers.
        license:
          $ref: '#/components/schemas/accessKeyLicense'
        storage:
          $ref: '#/components/schemas/accessKeyStorageRequest'
        configuration:
          $ref: '#/components/schemas/accessKeyPUTConfiguration'
    error:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/errorBody'
      description: The error response object.
    errorBody:
      type: object
      properties:
        code:
          type: integer
          description: The HTTP error code.
        reason:
          type: string
          description: The HTTP error message.
        user_message:
          type: string
          description: A longer error description.
      description: The contents of the error response object.
    events-get-200:
      type: array
      description: An array of event metadata.
      items:
        $ref: '#/components/schemas/events-id-get-200'
    events-id-get-200:
      type: object
      properties:
        id:
          type: string
          description: The event ID.
        time:
          type: string
          description: The time of the event in ISO format.
        user_id:
          type: string
          description: The user ID of the user who caused the event.
        types:
          type: string
          description: An array of the event types associated with the event.
          example: ""
        data:
          type: string
          description: "A JSON object with information about the event, corresponding\
            \ to the Node API endpoint response for the action, such as the transfer\
            \ specification for transfers, or file information for permissions changes."
    fileMetadata:
      type: object
      properties:
        id:
          type: string
          description: The file ID.
        path:
          type: string
          description: The file pathname.
        start_time_usec:
          type: integer
          description: "The time the file began transferring, in microseconds since\
            \ the server's epoch."
        end_time_usec:
          type: integer
          description: "The time the file ended transferring, in microseconds since\
            \ the server's epoch."
        elapsed_usec:
          type: integer
          description: "The transfer time for the file, in microseconds."
        status:
          type: string
          description: "The transfer status for the file. Values are \"transferring\"\
            , \"completed\", or \"failed\"."
        error_code:
          type: integer
          description: The error code for the file transfer.
        error_desc:
          type: string
          description: "A description of the file transfer error. If no error, \"\
            No error\"."
        size:
          type: integer
          description: "The size of the file, in bytes."
        type:
          type: string
          description: "The type of file, either \"file\" or \"link\" (for symbolic\
            \ links)."
        checksum_type:
          type: string
          description: The type of checksum that is calculated for the file by the
            sender.
        checksum:
          type: string
          description: The checksum that is calculated for the file by the sender.
        start_byte:
          type: integer
          description: The first byte of the file that is transferred.
        bytes_written:
          type: integer
          description: The first byte of the file that is transferred.
        session_id:
          type: string
          description: The ID of the session in which the file was transferred.
    files-id-files-post-request:
      required:
      - name
      - type
      type: object
      properties:
        name:
          type: string
          description: The name of the file.
          example: filename
        type:
          type: string
          description: "The file type. Values: \"file\" for regular files, \"link\"\
            \ for symbolic links, or \"folder\" for a directory."
          example: file
          enum:
          - file
          - link
          - folder
        target_id:
          type: string
          description: The file ID of the symbolic link target.
        target_node_id:
          type: string
          description: The node ID of the node on which the symbolic link target is
            located. Get the node ID by using /info.
        mount_point:
          type: boolean
          description: "If true, the directory is treated as a mount point."
        contents:
          type: string
          description: base64 encoded contents of the file to be created.
    files-id-files-post-200:
      type: object
      properties:
        id:
          type: string
          description: "The file ID of the created file, symbolic link, or directory."
          example: "417"
        name:
          type: string
          description: "The name of the created file, symbolic link, or directory."
          example: file.txt.17
        size:
          type: integer
          description: "The size of the file, symbolic link, or directory, in bytes."
          example: 0
        type:
          type: string
          description: The file type.
          example: file
        modified_time:
          type: string
          description: The file creation time in ISO format.
          example: 2017-04-05T23:15:32Z
        content_type:
          type: string
          description: "The file format, such as application/octet-stream and text/plain."
          example: application/octet-stream
    files-id-put-request:
      type: object
      properties:
        name:
          type: string
          description: "The new name for the file, symbolic link, or directory."
          example: new_file_name
        mount_point:
          type: boolean
          description: "If true, the directory is a mount point. Does not apply to\
            \ files or symbolic links."
          example: false
    files-id-get-200:
      type: object
      properties:
        id:
          type: string
          description: File ID.
          example: "19"
        name:
          type: string
          description: File name.
          example: sample.txt
        path:
          type: string
          description: File path.
          example: /Users/aspera/Documents/sample.txt
        size:
          type: integer
          description: "For files, the size of the file in bytes. This key-value pair\
            \ is not returned for directories."
          example: 445
        type:
          type: string
          description: "The file type. Values: \"file\" for regular files, \"link\"\
            \ for symbolic links, or \"folder\" for a directory."
          example: file
          enum:
          - file
          - link
          - folder
        modified_time:
          type: string
          description: Modification time in ISO format.
          example: 2018-02-09T17:15:17Z
        mount_point:
          type: boolean
          description: "For directories, if the directory is a mount point."
          example: false
        access_levels:
          type: array
          description: JSON array of permissions on the file.
          example:
          - list
          - read
          - write
          - delete
          - mkdir
          - rename
          - preview
          items:
            type: string
            enum:
            - list
            - read
            - write
            - delete
            - mkdir
            - rename
            - preview
        access_level:
          type: string
          description: Deprecate from version 4.0.1 (retained for backwards compatibility).
            Use access_levels.
          example: edit
    files-id-get-202:
      type: object
      properties:
        status:
          type: string
          description: The current status of the job
          enum:
          - waiting
          - running
          - complete
          - ncomplete
          - cancelled
          - aborted
          - error
        elapsed:
          type: string
          description: Time that has taken to execute the job
    files-id-delete-202:
      type: object
      properties:
        status:
          type: string
          description: |
            The current status of the job:
              * `waiting` - job as been submitted to the job queue, waiting for an execution
                 node to take it.
              * `running` - job is assigned to an execution node and is either in start
                 delay (see above) or executing.
              * `complete` - job completed successfully
              * `ncomplete` - job completed on more than one node (this is an configuration
                 error, job_timeout_ms was too low, another node took job
                 assuming first execution node had failed)
              * `cancelled` - job was stopped by user before it began executing
              * `aborted` - job was stopped by user after it began executing
              * `error` - error executing job
          enum:
          - waiting
          - running
          - complete
          - ncomplete
          - cancelled
          - aborted
          - error
        url:
          type: string
          description: the file id url
        job_id:
          type: string
          description: the job id of the delete job.
    files-id-files-get-200:
      type: object
      properties:
        id:
          type: string
          description: File ID.
        name:
          type: string
          description: File name.
        path:
          type: string
          description: File path.
        type:
          type: string
          description: "file, link, or folder."
        modified_time:
          type: string
          description: Modification time in ISO format.
        mount_point:
          type: boolean
          description: "For directories, if the directory is a mount point."
        access_levels:
          type: array
          description: JSON array of permissions on the file.
          example:
          - list
          - read
          - write
          - delete
          - mkdir
          - rename
          - preview
          items:
            type: string
            enum:
            - list
            - read
            - write
            - delete
            - mkdir
            - rename
            - preview
        access_level:
          type: string
          description: Deprecated version of access_levels that is retained for backwards
            compatibility.
    files-id-put-404:
      type: object
      properties:
        error:
          type: string
          description: Error response.
          example: ""
    filesDuRequest:
      required:
      - path
      type: object
      properties:
        path:
          type: string
          description: The full pathname of the file or directory.
    filesBrowseRequest:
      required:
      - path
      type: object
      properties:
        path:
          type: string
          description: The full pathname of the directory to browse.
        skip:
          type: integer
          description: Do not return information about the first number of files and
            directories. Default 0.
        count:
          type: integer
          description: Return no more than "count" results.  It is the client’s responsibility
            to keep track of number of results returned. Default 100.
        sort:
          type: string
          description: "Sort the results by \"path\", \"type\" (directory/file), \"\
            size_a\"(bytes, ascending), \"size_d\" (bytes, descending), \"mtime_a\"\
            \  (modification date, ascending), or \"mtime_d\" (modification date,\
            \ descending)."
        case_sensitive:
          type: boolean
          description: "Specify if sort and basename are case sensitive (true) or\
            \ not (false). Default: false."
        filters:
          $ref: '#/components/schemas/filesBrowseFilters'
    filesPageRequest:
      required:
      - path
      type: object
      properties:
        path:
          type: string
          description: The full pathname of the directory to browse.
        iteration_token:
          type: string
          description: "The iteration token to explore the current page. For the first\
            \ page, this is not required, and the next page token will be returned\
            \ in the body as 'next_iteration_token'."
        retrieve_times:
          type: boolean
          description: Get the times stored in the metadata (which reduces drastically
            the performances).
        retrieve_metadata:
          type: boolean
          description: Whether or not the file meta data will be returned for the
            current page.
        count:
          type: integer
          description: Return no more than "count" results.  It is the client’s responsibility
            to keep track of number of results returned. Default 100.
        filters:
          $ref: '#/components/schemas/filesPageFilters'
    filesPageFilters:
      type: object
      properties:
        types:
          type: array
          description: "Return data only for the specified content types: file, symbolic_link,\
            \ or directory."
          example:
          - file
          - directory
          items:
            type: string
            enum:
            - file
            - directory
            - symbolic_link
        basenames:
          type: array
          description: Return data only for files with basenames that match the specified
            basenames.
          example:
          - '*.jpg'
          - '*.gif'
          items:
            type: string
        out_basenames:
          type: array
          description: "Return data only for files with basenames that don't match\
            \ the specified out_basenames, it won't be returned even if it matches\
            \ one of the basenames."
          example:
          - '*.pdf'
          - '*.doc'
          items:
            type: string
    filesBrowseFilters:
      type: object
      properties:
        types:
          type: array
          description: "Return data only for the specified content types: file, symbolic_link,\
            \ or directory."
          example:
          - file
          - directory
          items:
            type: string
            enum:
            - file
            - symbolic_link
            - directory
        paths:
          type: array
          description: Return data only for path names that match the specified path.
          example:
          - /a/*
          - b/*/c*
          items:
            type: string
        basenames:
          type: array
          description: Return data only for files with basenames that match the specified
            basenames.
          example:
          - '*.jpg'
          - '*.gif'
          items:
            type: string
        size_min:
          type: integer
          description: "Include files that are greater than or equal to size_min (in\
            \ bytes). NOTE: This setting automatically restricts the results to files,\
            \ equivalent to setting \"types\":\"file\"."
          example: 1000
        size_max:
          type: integer
          description: "Include files that are less than size_max (in bytes). NOTE:\
            \ This setting automatically restricts the results to files, equivalent\
            \ to setting \"types\":\"file\"."
          example: 10000
        mtime_min:
          type: string
          description: "Include files that were updated after mtime_min, in the format\
            \ \"2011-01-31T12:59:59Z\", T or space in the middle; Z optional at the\
            \ end."
          example: 2011-01-01 00:00:00
        mtime_max:
          type: string
          description: "Include files that were updated before mtime_max, in the format\
            \ \"2011-01-31T12:59:59Z\", T or space in the middle; Z optional at the\
            \ end."
          example: 2011-01-31 11:59:59
      description: List of query filters that are applied to the source paths.
    filesBrowseResponse:
      type: object
      properties:
        self:
          $ref: '#/components/schemas/filesBrowseMeta'
        items:
          type: array
          items:
            $ref: '#/components/schemas/filesBrowseMeta'
    filesPageResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/filesPageMeta'
    filesBrowseMeta:
      type: object
      properties:
        path:
          type: string
          description: "The pathname of the file, directory, or symbolic link."
          example: /Documents/Users/aspera
        basename:
          type: string
          description: The base name of the path.
          example: sample.txt
        type:
          type: string
          description: "The type of the path. Value is \"file\", \"directory\", or\
            \ \"symbolic_link\"."
          example: file
        size:
          type: integer
          description: "The size of the file or symbolic link, in bytes. Directory\
            \ size is reported as 0."
          example: 3290353589
        mtime:
          type: string
          description: "The item's modification time, in ISO format."
          example: 2011-01-31 11:59:59
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/filesBrowsePermissions'
        target:
          $ref: '#/components/schemas/filesBrowseTarget'
      description: JSON object that contains the metadata associated with the base
        path of the request.
    filesPageMeta:
      type: object
      properties:
        path:
          type: string
          description: "The pathname of the file, directory, or symbolic link."
          example: /Documents/Users/aspera
        basename:
          type: string
          description: The base name of the path.
          example: sample.txt
        type:
          type: string
          description: "The type of the path. Value is \"file\", \"directory\", or\
            \ \"symbolic_link\"."
          example: file
        size:
          type: integer
          description: "The size of the file or symbolic link, in bytes. Directory\
            \ size is reported as 0."
          example: 3290353589
        mtime:
          type: string
          description: "The item's modification time, in ISO format."
          example: 2011-01-31 11:59:59
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/filesBrowsePermissions'
        item_count:
          type: integer
          description: The total number of items returned in the response
        next_iteration_token:
          type: string
          description: The iteration token to explore the current page.
        parameters:
          $ref: '#/components/schemas/filesPageParameters'
      description: JSON object that contains the metadata associated with the base
        path of the request.
    filesPageParameters:
      type: object
      properties:
        path:
          type: string
          description: "The pathname of the file, directory, or symbolic link."
        count:
          type: integer
          description: The number of items to be returned maximum.
        iteration_token:
          type: string
          description: The iteration token being used for the current page.
        retrieve_times:
          type: boolean
          description: Whether or not the times were returned for the current page.
        retrieve_metadata:
          type: boolean
          description: Whether or not the file meta data was returned for the current
            page.
      description: The set of parameters by which the current file page explore was
        executed.
    filesBrowsePermissions:
      type: object
      properties:
        name:
          type: string
          description: "The permissions that is set on the content. Value is \"view\"\
            , \"edit\", and \"delete\"."
          example: edit
    filesBrowseTarget:
      type: object
      properties:
        path:
          type: string
          description: "The pathname of the file, directory, or symbolic link that\
            \ is the target of the symbolic link."
          example: /Documents/Users/aspera
        basename:
          type: string
          description: The base name of the symbolic link target.
          example: sample.txt
        type:
          type: string
          description: "The type of the symbolic link target. Value is \"file\", \"\
            directory\", or \"symbolic_link\"."
          example: file
        size:
          type: integer
          description: "The size of the file or symbolic link, in bytes. Directory\
            \ size is reported as 0."
          example: 108323953
        mtime:
          type: string
          description: "The symbolic link target's modification time, in ISO format."
          example: 2011-01-31 11:59:59
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/filesBrowsePermissions'
      description: JSON object that contains the metadata associated with the symbolic
        link target.
    files-create-post-request:
      required:
      - paths
      type: object
      properties:
        paths:
          type: array
          description: "Array containing the paths of the files, directories, and\
            \ symbolic links to create."
          items:
            $ref: '#/components/schemas/files-create-path'
    files-create-path:
      required:
      - path
      - type
      type: object
      properties:
        path:
          type: string
          description: The pathname for the new item.
        type:
          type: string
          description: "The type of item to create. Values are file, directory, or\
            \ symbolic_link."
        target:
          $ref: '#/components/schemas/files-create-target'
        contents:
          type: string
          description: base64 encoded contents of the file to be created.
    files-create-target:
      required:
      - path
      type: string
      properties:
        path:
          type: string
          description: The pathname of the target for the new symbolic link.
      description: Required when 'type' is "symbolic_link'. JSON containing the target
        pathname.
    files-create-post-200:
      type: object
      properties:
        paths:
          type: array
          description: JSON object that lists the pathnames created by the request.
          items:
            $ref: '#/components/schemas/files-create-response-path'
    files-create-response-path:
      type: object
      properties:
        path:
          type: string
          description: The new item pathname.
        error:
          $ref: '#/components/schemas/files-create-error'
    files-create-error:
      type: object
      properties:
        code:
          type: integer
          description: HTTP error code number.
          example: 409
        reason:
          type: string
          description: Short error description.
          example: Conflict
        user_message:
          type: string
          description: Longer error description.
          example: Path already exists
      description: JSON object describing an error.
    files-delete-post-request:
      required:
      - paths
      type: object
      properties:
        paths:
          type: array
          description: Array of full paths to the files and directories to delete.
          items:
            $ref: '#/components/schemas/files-delete-path'
    files-delete-path:
      required:
      - path
      type: object
      properties:
        path:
          type: string
          description: The full path to the file or directory to delete.
        recursive_delete:
          type: boolean
          description: "Set the behavior for deleting non-empty directories. If true\
            \ (default), delete directories even if they are non-empty. Set to false\
            \ to not delete non-empty directories and return an error."
    files-delete-post-200:
      type: object
      properties:
        paths:
          type: array
          description: JSON array of full paths to the files and directories in the
            request body.
          items:
            $ref: '#/components/schemas/files-delete-response-path'
    files-delete-response-path:
      type: object
      properties:
        path:
          type: string
          description: The deleted item pathname.
        error:
          $ref: '#/components/schemas/files-delete-error'
    files-delete-error:
      type: object
      properties:
        code:
          type: integer
          description: HTTP error code number.
          example: 500
        reason:
          type: string
          description: Short error description.
          example: Not Found
        user_message:
          type: string
          description: Longer error description.
          example: No such file or directory
      description: "JSON object describing an error, if any."
    files-download_setup-post-request:
      required:
      - transfer_requests
      type: object
      properties:
        transfer_requests:
          type: array
          description: "The JSON object that contains the transfer request information.\
            \ Multiple transfer requests can be included as comma-delimited transfer_request\
            \ objects, if needed."
          items:
            $ref: '#/components/schemas/token-transfer-request'
    token-transfer-request:
      required:
      - transfer_request
      type: object
      properties:
        transfer_request:
          $ref: '#/components/schemas/token-transfer-request-body'
    token-transfer-request-body:
      type: object
      properties:
        source_root:
          type: string
          description: The source root directory of the files.
          example: /Users/aspera
        destination_root:
          type: string
          description: The destination root directory.
        token_life_seconds:
          type: integer
          description: "How long the token is valid after creation, in seconds. This\
            \ option overrides the server setting."
          example: 43200
        paths:
          type: array
          description: "Array of source or destination paths. For uploads, either\
            \ a value must be provided for \"destination_root\" or at least one \"\
            destination\" must be set in \"paths\". Set \"destination\" as \"*\" to\
            \ allow uploads to the \"destination_root\" itself or any directories\
            \ within it. For downloads, either a value must be provided for \"source_root\"\
            \ or at least one \"source\" must be set in \"paths\". Set \"source\"\
            \ as * to allow downloads of the \"source_root\" itself or any files within\
            \ it."
          items:
            $ref: '#/components/schemas/token-paths'
        remote_host:
          type: string
          description: IP or fully qualified domain name of the remote server
          example: 10.0.0.1
        cipher_allowed:
          type: string
          description: "The algorithm that is used to encrypt data during a transfer.\
            \ Use this option when transmitting sensitive data. Allowed values: none,\
            \ \"aes-128\", \"aes-256\". Default: none."
          example: aes-128
        content_protection:
          type: string
          description: "Enable content protection (encryption-at-rest), which encrypts\
            \ files when they are uploaded to the server and decrypts files when they\
            \ are downloaded. Allowed values:  encrypt: Encrypt transferred files\
            \ (on the server). decrypt: Decrypt downloaded files. If content_protection_password\
            \ is not specified, Connect will prompt for the passphrase.  Default:\
            \ decrypt"
          example: decrypt
        content_protection_password:
          type: string
          description: Password to apply or remove encryption. Must be provided when
            "content_protection" is enabled.
        cookie:
          type: string
          description: "Metadata to associate with the transfer. The cookie is reported\
            \ to both client-side and server-side applications that are monitoring\
            \ FASP transfers. Default: none"
        fasp_port:
          type: integer
          description: "The UDP port for FASP to use. The default value works for\
            \ most situations; however, it can be changed to satisfy firewall requirements.\
            \ Default: 33001"
          example: 33001
        ssh_port:
          type: integer
          description: "The server's TCP port that is listening for SSH connections.\
            \ FASP® initiates transfers through SSH. Default value: 33001"
          example: 22
        http_fallback:
          type: boolean
          description: "If set to true, the transfer attempts an HTTP or HTTPS transfer\
            \ if FASP transfer errors. Default: false."
          example: false
        http_fallback_port:
          type: integer
          description: "The port that is used for HTTP transfers. If a cipher is enabled,\
            \ the default is 443; otherwise, the default is 80."
          example: 443
        https_fallback_port:
          type: integer
          description: "The port that is used for HTTPS transfers. If a cipher is\
            \ enabled, the default is 443; otherwise, the default is 80."
          example: 443
        rate_policy_allowed:
          type: string
          description: The most aggressive rate policy that is allowed for the transfer.
            See "rate_policy" for values.
          example: high
        rate_policy:
          type: string
          description: "The congestion control behavior to use when sharing bandwidth.\
            \ Allowed values:  high: When sharing bandwidth, transfer at twice the\
            \ rate of a transfer using a fair policy. fair (default value): Share\
            \ bandwidth equally with other traffic. low: Use only un-utilized bandwidth.\
            \ fixed: Transfer at the target rate, regardless of the actual network\
            \ capacity. Do not share bandwidth. The fixed policy can decrease transfer\
            \ performance and cause problems on the target storage."
          example: fair
        target_rate_kbps:
          type: integer
          description: "The desired speed of the transfer, in Kbps. If there is competing\
            \ network traffic, FASP shares this bandwidth, depending on the \"rate_policy\"\
            . Default is set on the server in the configuration file (aspera.conf).\
            \ Will respect both local- and server-side target rate caps if set. Must\
            \ be provided when you set a value for \"target_rate_cap_kbps\"."
          example: 10000
        target_rate_cap_kbps:
          type: integer
          description: "Upper limit of target rate, in Kbps. Default: no limit"
          example: 12000
        tags:
          $ref: '#/components/schemas/transferRequestAsperaTags'
        aspera_connect_settings:
          type: string
          description: "For more information on Connect settings, see Transfer Specifications."
    token-paths:
      type: object
      properties:
        source:
          type: string
          description: "The path for the source file or directory, relative to the\
            \ source root."
        destination:
          type: string
          description: "Destination path for the file or directory being transferred,\
            \ relative to the destination root."
      description: "For uploads and downloads, a source must be included in each path. The destination is optional only when a “destination_root” is provided. The “source_root” is always optional."
    files-download_setup-post-200:
      type: object
      properties:
        transfer_specs:
          type: array
          description: An array of transfer specifications that are allowed by the
            specified tokens.
          items:
            $ref: '#/components/schemas/token-transfer-spec'
    token-transfer-spec:
      type: object
      properties:
        transfer_spec:
          $ref: '#/components/schemas/token-transfer-spec-body'
    token-transfer-spec-body:
      type: object
      properties:
        paths:
          type: array
          description: "Array of JSON objects containing source and, if specified,\
            \ destination paths."
          items:
            $ref: '#/components/schemas/paths'
        source_root:
          type: string
          description: The source root directory of the files.
          example: /Users/aspera
        destination_root:
          type: string
          description: The destination root directory.
          example: /projects/images
        token:
          type: string
          description: The token string.
          example: ATB2_ACsjPbserJSER32u-FHp6BsERNE3834UgE_2BTA
        direction:
          type: string
          description: "For downloads, the value is receive. For uploads, the value\
            \ is send."
        cipher:
          type: string
          description: The weakest cipher that is allowed for the transfer. Value
            can be "none" or "aes-128".
          example: aes-128
        tags:
          $ref: '#/components/schemas/transferRequestAsperaTags'
        rate_policy_allowed:
          type: string
          description: The most aggressive rate policy that is allowed for the transfer.
            See rate_policy for values.
          example: high
        rate_policy:
          type: string
          description: "The congestion control behavior to use when sharing bandwidth.\
            \ Allowed values:  high: When sharing bandwidth, transfer at twice the\
            \ rate of a transfer using a fair policy. fair (default value): Share\
            \ bandwidth equally with other traffic. low: Use only un-utilized bandwidth.\
            \ fixed: Transfer at the target rate, regardless of the actual network\
            \ capacity. Do not share bandwidth. The fixed policy can decrease transfer\
            \ performance and cause problems on the target storage."
          example: fair
        target_rate_kbps:
          type: integer
          description: "The desired speed of the transfer, in Kbps."
          example: 10000
        min_rate_kbps:
          type: integer
          description: "The minimum transfer rate, in Kbps."
          example: 0
        remote_host:
          type: string
          description: IP or fully qualified domain name of the remote server
          example: 10.0.0.1
        remote_user:
          type: string
          description: "The system user that authenticates the SSH connection for\
            \ the transfer, derived from the request authentication method."
          example: xfer
        sshfp:
          type: string
          description: "The node's SSH fingerprint, if it is configured in the node's\
            \ aspera.conf."
        ssh_port:
          type: integer
          description: "The server's TCP port that is listening for SSH connections.\
            \ FASP® initiates transfers through SSH. Default value: 33001"
          example: 22
        fasp_port:
          type: integer
          description: "The UDP port for FASP to use. The default value works for\
            \ most situations; however, it can be changed to satisfy firewall requirements.\
            \ Default: 33001"
          example: 33001
        http_fallback:
          type: boolean
          description: "If set to true, the transfer attempts an HTTP or HTTPS transfer\
            \ if FASP transfer errors. Default: false."
          example: false
        https_fallback_port:
          type: integer
          description: "The port that is used for HTTPS transfers. If a cipher is\
            \ enabled, the default is 443; otherwise, the default is 80."
          example: 443
      description: The transfer specification.
    files-info-post-request:
      required:
      - paths
      type: object
      properties:
        paths:
          type: array
          description: A JSON object that specifies an array of paths.
          items:
            $ref: '#/components/schemas/files-info-request-path'
    files-info-request-path:
      required:
      - path
      type: object
      properties:
        path:
          type: string
          description: The path name. Metadata is returned for each path.
          example: /documents/user/file1.txt
    files-info-post-200:
      type: object
      properties:
        paths:
          type: array
          description: The array of paths
          example:
          - path: /Users/aspera/Documents
            basename: Documents
            type: directory
            size: 0
            mtime: 2018-03-01T22:56:14Z
            permissions:
            - name: view
            - name: edit
            - name: delete
          - path: /Users/aspera/Documents/sample.txt
            basename: sample.txt
            type: file
            size: 445
            mtime: 2018-02-09T23:08:46Z
            permissions:
            - name: view
            - name: edit
            - name: delete
          - path: /Users/aspera/Documents/symlink1
            basename: symlink1
            type: file
            size: 445
            mtime: 2018-02-09T23:08:46Z
            permissions:
            - name: view
            - name: edit
            - name: delete
          - path: /Users/aspera/Documents/missing_file.txt
            error:
              code: 404
              reason: Not Found
              user_message: Path not found
          items:
            $ref: '#/components/schemas/files-info-metadata'
    files-info-metadata:
      type: object
      properties:
        path:
          type: string
          description: The pathname.
          example: /documents/user/file1.txt
        basename:
          type: string
          description: The base name of the item.
          example: file1.txt
        type:
          type: string
          description: "The type of item: \"file\" (for files and symbolic links)\
            \ or \"directory\""
          example: file
        size:
          type: integer
          description: The size of the file. Size is not reported for directories.
          example: 455
        mtime:
          type: string
          description: The modification time of the file in ISO format.
          example: 2018-02-09T23:08:46Z
        permissions:
          type: array
          description: "An array of permissions that the user has for the item. Permissions\
            \ values are \"view\", \"edit\", and \"delete\"."
          items:
            $ref: '#/components/schemas/gen3-permissions'
        error:
          $ref: '#/components/schemas/files-delete-error'
    gen3-permissions:
      type: object
      properties:
        name:
          type: string
          description: "The permission granted to the user for the file. Value is\
            \ \"view\", \"edit\", or \"delete\"."
          example: view
    files-rename-post-request:
      required:
      - paths
      type: object
      properties:
        paths:
          type: array
          description: "A JSON array of the files, symbolic links, and directories\
            \ to rename."
          example:
          - path: /full/path/to/parent/dir
            source: old_dir_name
            destination: new_dir_name
          - path: /full/path/to/parent/dir
            source: old_file_name
            destination: new_file_name
          items:
            $ref: '#/components/schemas/files-rename-post-path'
    files-rename-post-path:
      required:
      - destination
      - path
      - source
      type: object
      properties:
        path:
          type: string
          description: "The full path to the parent directory of the file, symbolic\
            \ link, or directory to rename."
          example: /documents/folder/
        source:
          type: string
          description: "The current name of the file, symbolic link, or directory."
          example: old_file_name.txt
        destination:
          type: string
          description: "The new name for the file, symbolic link, or directory."
          example: new_file_name.txt
    files-rename-post-200:
      type: object
      properties:
        paths:
          type: array
          description: "A JSON array of the renamed files, symbolic links, and directories."
          items:
            $ref: '#/components/schemas/files-rename-response-path'
    files-rename-response-path:
      type: object
      properties:
        path:
          type: string
          description: "The full path to the parent directory of the file, symbolic\
            \ link, or directory to rename."
          example: /documents/folder/
        source:
          type: string
          description: "The current name of the file, symbolic link, or directory."
          example: old_file_name.txt
        destination:
          type: string
          description: "The new name for the file, symbolic link, or directory."
          example: new_file_name.txt
        error:
          $ref: '#/components/schemas/files-delete-error'
    files-search-post-request:
      required:
      - path
      type: object
      properties:
        path:
          type: string
          description: "path to file or directory, it should be relative to the doc\
            \ root."
          example: /
        skip:
          type: integer
          description: Skip the first skip results. Default 0
          example: 5
        count:
          type: integer
          description: Return no more than count results.  It is the client's responsibility
            to keep track of number of results returned. Default 100.
          example: 100
        case_sensitive:
          type: boolean
          description: "Set to true to make sort and basename case sensitive. Default:\
            \ false. Search on Solaris, AIX, Windows, and Isilon nodes is always case\
            \ sensitive."
        sort:
          type: string
          description: "Sort results by the specified value. Values: \"path\" (sort\
            \ by pathname), \"type\" (sort by directory/file), \"size_a\" (sort by\
            \ bytes, ascending), \"size_d\" (sort by bytes, descending), \"mtime_a\"\
            \ (sort by modification date, ascending), or \"mtime_d\" (sort by modification\
            \ date, descending)."
          example: path
        filters:
          $ref: '#/components/schemas/files-search-filters'
    files-search-filters:
      type: object
      properties:
        types:
          type: array
          description: "Return data only for the specified content types: \"file\"\
            , \"symbolic_link\", or \"directory\", specified as an array."
          example:
          - file
          - directory
          items:
            type: string
            enum:
            - file
            - directory
            - symbolic_link
        paths:
          type: array
          description: Return data only for path names that match the specified path.
          example:
          - '*.txt'
          - '*.doc'
          items:
            type: string
        basenames:
          type: array
          description: Return data only for files with basenames that match the specified
            basenames.
          items:
            type: string
        size_min:
          type: integer
          description: "Include files that are greater than or equal to \"size_min\"\
            \ (in bytes). NOTE: This setting automatically restricts the results to\
            \ files, equivalent to setting types to file."
          example: 1
        size_max:
          type: integer
          description: "Include files that are less than \"size_max\" (in bytes).\
            \ NOTE: This setting automatically restricts the results to files, equivalent\
            \ to setting types to file."
        mtime_min:
          type: string
          description: "Include files that were updated after \"mtime_min\", in the\
            \ format \"2011-01-31T12:59:59Z\", T or space in the middle; Z optional\
            \ at the end."
          example: 2011-01-31T12:59:59Z
        mtime_max:
          type: string
          description: "Include files that were updated before \"mtime_max\", in ISO\
            \ format 2011-01-31T12:59:59Z, T or space in the middle; Z optional at\
            \ the end."
          example: 2011-01-31T12:59:59Z
        depth_min:
          type: integer
          description: The minimum directory depth to search.
          example: 1
        depth_max:
          type: integer
          description: The maximum directory depth to search.
          example: 4
    files-search-post-200:
      type: object
      properties:
        items:
          type: array
          description: Array of file and directory metadata that match the search
            request.
          example:
          - path: /Users/aspera/Documents/.sample.txt.asp-lck/1519688692nak123
            basename: 1519688692nak123
            type: file
            size: 0
            mtime: 2018-02-26T23:44:52Z
            permissions:
            - name: view
            - name: edit
            - name: delete
          - path: /Users/aspera/Documents/sample.txt
            basename: sample.txt
            type: file
            size: 445
            mtime: 2018-02-09T23:08:46Z
            permissions:
            - name: view
            - name: edit
            - name: delete
          - path: /Users/aspera/Documents/symlink1
            basename: symlink1
            type: file
            size: 445
            mtime: 2018-02-09T23:08:46Z
            permissions:
            - name: view
            - name: edit
            - name: delete
          - path: /Users/aspera/Documents/test_folder
            basename: test_folder
            type: directory
            size: 0
            mtime: 2018-02-19T17:43:59Z
            permissions:
            - name: view
            - name: edit
            - name: delete
          items:
            $ref: '#/components/schemas/files-search-response-items'
        item_count:
          type: integer
          description: "The number of items returned by the request, calculated as\
            \ the total number of items in the path minus the number of items that\
            \ are skipped and filtered."
          example: 4
        total_count:
          type: integer
          description: "The total number of items in the request path, minus the number\
            \ of items that are filtered."
          example: 5
        parameters:
          $ref: '#/components/schemas/files-search-parameters'
    files-search-response-items:
      type: object
      properties:
        path:
          type: string
          description: "The pathname of the file, symbolic link, or directory."
        basename:
          type: string
          description: The item's basename.
        type:
          type: string
          description: The item type.
        size:
          type: integer
          description: The size of the item in bytes.
        mtime:
          type: string
          description: "The modification time of the item, in ISO format."
        permissions:
          type: array
          description: "An array of permissions that the user has for the item. Permissions\
            \ values are \"view\", \"edit\", and \"delete\"."
          items:
            $ref: '#/components/schemas/gen3-permissions'
    files-search-parameters:
      type: object
      properties:
        path:
          type: string
          description: Absolute path to file or directory.
          example: /
        skip:
          type: integer
          description: Number of items skipped.
          example: 5
        count:
          type: integer
          description: Number of items returned.
          example: 100
        depth_min:
          type: integer
          description: The minimum directory depth searched.
          example: 1
        depth_max:
          type: integer
          description: The maximum directory depth searched.
          example: 4
    files-upload_setup-post-request:
      required:
      - transfer_requests
      type: object
      properties:
        transfer_requests:
          type: array
          description: "The JSON object that contains the transfer request information.\
            \ Multiple transfer requests can be included as comma-delimited \"transfer_request\"\
            \ objects, if needed."
          items:
            $ref: '#/components/schemas/token-transfer-request'
    files-upload_setup-post-200:
      type: object
      properties:
        transfer_specs:
          type: array
          description: An array of transfer specifications that are allowed by the
            specified tokens.
          items:
            $ref: '#/components/schemas/token-transfer-spec'
    info-get-200:
      type: object
      properties:
        application:
          type: string
          description: node
        version:
          type: string
          description: The version of the IBM Aspera server software on the node.
        current_time:
          type: string
          description: "The current time on the node in ISO format, for example 2018-02-28T21:28:06Z."
        license_expiration_date:
          type: string
          description: The expiration date of the server software license as YYYY-MM-DD.
        license_max_rate:
          type: string
          description: The maximum transfer rate allowed by the server license.
        os:
          type: string
          description: Operating system specifications.
        aej_status:
          type: string
          description: "The status of the node's connection to aejd, the Aspera on\
            \ Cloud Activity app reporting service. Value is \"connected\" or \"disconnected\"\
            ."
        async_reporting:
          type: string
          description: If Sync reporting is enabled on the node. Value is "yes" or
            "no".
        transfer_activity_reporting:
          type: string
          description: If transfer activity reporting is enabled on the node. Value
            is "yes" or "no".
        transfer_user:
          type: string
          description: The transfer user associated with the authentication method.
        docroot:
          type: string
          description: "The docroot that is configured for the transfer user, if any."
        node_id:
          type: string
          description: "The unique ID of the node, such as dc3239h5-f872-48b9-v5h9-849rn233725."
          example: dc3239h5-f872-48b9-v5h9-849rn233725
        cluster_id:
          type: string
          description: "The unique ID of the cluster, such as 88613fc0-4ad8-47ee-99f0-019122f11575.\
            \ This value is generated even when the node is not part of a cluster."
          example: 88613fc0-4ad8-47ee-99f0-019122f11575
        acls:
          type: array
          description: An array of Watch Folder API ACLs that are associated with
            the user.
          example:
          - admin
          - impersonation
          items:
            type: string
        access_key_configuration_capabilities:
          $ref: '#/components/schemas/ak_config_capabilities'
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/capabilities_items'
        settings:
          type: array
          items:
            $ref: '#/components/schemas/settings_items'
    ak_config_capabilities:
      type: object
      properties:
        transfer:
          type: array
          description: "A list of the transfer settings that can be configured in\
            \ the access key, depending on the version of the node. Values include:\
            \ \"cipher\", \"policy\", \"target_rate_cap_kbps\", \"target_rate_kbps\"\
            , \"preserve_timestamps\", \"content_protection_secret\", \"token_encryption_key\"\
            , \"byok_enabled\", \"client_password_requirements\", and \"aggressiveness\"."
          example:
          - cipher
          - policy
          - target_rate_cap_kbps
          - target_rate_kbps
          - preserve_timestamps
          - content_protection_secret
          - token_encryption_key
          - byok_enabled
          - aggressiveness
          - bandwidth_flow_network_rc_module
          - client_password_requirements
          items:
            type: string
        server:
          type: array
          description: "A list of the server settings that can be configured in the\
            \ access key, depending on the version of the node. Values include: \"\
            activity_event_logging\", \"recursive_counts\", and \"aej_logging\"."
          example:
          - activity_event_logging
          - activity_file_event_logging
          items:
            type: string
            enum:
            - activity_event_logging
            - activity_file_event_logging
            - recursive_counts
            - aej_logging
            - wss_enabled
            - ftsearch
            - activity_transfer_ignore_skipped_files
            - activity_files_max
            - access_key_credentials_encryption_type
            - discovery
            - allow
            - deny
      description: The transfer and server configuration options that can be set in
        an access key for the node.
    capabilities_items:
      type: object
      properties:
        name:
          type: string
          description: "The server capability, which can include \"sync\", \"watchfolder\"\
            , \"symbolic_links\", \"move_file\", \"move_directory\", \"ssh_fingerprint\",
            \"aej_version\", and \"page\"."
        value:
          type: string
          description: "If true or a valid value is set, the server has the capability.\
            \ When the transfer user is configured with a file restriction instead\
            \ of a docroot, some capabilities might return an error instead of a valid\
            \ value."
      description: Information about server capabilities.
    settings_items:
      type: object
      properties:
        name:
          type: string
          description: "The server setting, which can include \"content_protection_required\"\
            , \"content_protection_strong_pass_required\", \"ssh_fingerprint\",
            \"wss_enabled\", and \"wss_port\"."
          enum:
          - content_protection_required
          - content_protection_strong_pass_required
          - ssh_fingerprint
          - wss_enabled
          - wss_port
        value:
          type: string
          description: The server setting value.
      description: Information about server settings that might affect transfer requests.
    paths:
      required:
      - source
      type: object
      properties:
        source:
          type: string
          description: "The path for the source file or directory, relative to the\
            \ source root."
        destination:
          type: string
          description: "Destination path for the file or directory that is being transferred,\
            \ relative to the destination root. If no destination is specified, the\
            \ content is transferred to the destination root."
      description: "The source paths, and optional destination paths, for the transfer."
    permissions-post-request:
      required:
      - access_id
      - access_level
      - access_levels
      - access_type
      - file_id
      type: object
      properties:
        file_id:
          type: string
          description: The ID of the file to which to apply the permissions.
        access_type:
          type: string
          description: "The access type, either \"user\" or \"group\"."
          enum:
          - user
          - group
        access_id:
          type: string
          description: "The user ID, if \"access_type\" is \"user\", or group ID if\
            \ \"access_type\" is \"group\"."
        access_levels:
          type: array
          description: |
            An array of access levels for the user or group. Values are: "list" (view the files in a path), "read" (read file content, including preview, and upload file), "write" (create files, but not directories, and download files), "delete" (delete the file), "mkdir" (create directory), "rename" (rename the file), and "preview" (read file preview). With any permission, the user can access file metadata.
          example:
          - list
          - read
          - preview
          items:
            type: string
            enum:
            - list
            - read
            - write
            - delete
            - mkdir
            - rename
            - preview
        tags:
          type: string
          description: A JSON object that contains user-defined or application-generated
            tags as key-value pairs. Tags can be used as search terms for GET requests.
    permissions-id-put-request:
      type: object
      properties:
        access_levels:
          type: string
          description: "The updated array of access levels, user access_level). Values: \"list\", \"read\", \"write\", \"delete\", \"mkdir\", \"rename\", or \"preview\". Note: The\
            \ updated list must include all the desired access levels, it is not an\
            \ additive action."
        access_level:
          type: string
          description: "The access level for HSTS. Values: \"view\" or \"edit\"."
        tags:
          type: string
          description: User-defined or application-generated tag-value pairs.
    permissions-post-200:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the permission.
          example: "1"
        file_id:
          type: string
          description: The ID of the file.
          example: "50"
        access_id:
          type: string
          description: The user ID or group ID.
          example: aspera
        access_type:
          type: string
          description: "The access type, either user or group."
          example: user
          enum:
          - user
          - group
        access_levels:
          type: array
          description: The access levels granted by the permission for the user or
            group. Not returned by HSTS nodes version 3.7.3 or older.
          example:
          - list
          - read
          - write
          - delete
          items:
            type: string
            enum:
            - list
            - read
            - write
            - delete
            - mkdir
            - rename
            - preview
        access_level:
          type: string
          description: The access level granted by the permission for the user or
            group. Returned by HSTS nodes version 3.7.3 or older.
        tags:
          type: string
          description: "User-defined or application-generated tags, if any."
        created_by_id:
          type: string
          description: The ID of the permission creator.
          example: ASPERA_ACCESS_KEY_ADMIN
        created_at:
          type: string
          description: "Time when the permission was created, in ISO format."
          example: 2018-02-13T17:54:38Z
        last_updated_by_id:
          type: string
          description: The ID of the user who last updated the permission.
          example: ASPERA_ACCESS_KEY_ADMIN
        last_updated_at:
          type: string
          description: "Time when the permission was modified, in ISO format."
          example: 2018-02-13T17:54:38Z
    permissions-get-200:
      type: object
      properties:
        id:
          type: string
          description: "The file ID (same as \"file_id\"). Returned only for requests\
            \ that include embed[]=file."
          example: "1"
        file_id:
          type: string
          description: The ID of the file.
          example: "50"
        file:
          type: string
          description: "A JSON array containing the file metadata. Returned only for\
            \ requests that include embed[]=file."
          example: ""
        name:
          type: string
          description: "The file name. Returned only for requests that include embed[]=file."
        path:
          type: string
          description: "The full filepath. Returned only for requests that include\
            \ embed[]=file."
        size:
          type: string
          description: "The size of the file, symbolic link, or directory, in bytes.\
            \ Returned only for requests that include embed[]=file."
        type:
          type: string
          description: "The file type (file, symbolic link, or folder). Returned only\
            \ for requests that include embed[]=file."
        modified_time:
          type: string
          description: "The file creation time in ISO format. Returned only for requests\
            \ that include embed[]=file."
        content_type:
          type: string
          description: "The file format, such as application/octet-stream and text/plain.\
            \ Returned only for requests that include embed[]=file."
        access_id:
          type: string
          description: The user ID or group ID.
          example: aspera
        access_type:
          type: string
          description: "The access type, value is \"user\" or \"group\"."
          example: user
          enum:
          - user
          - group
        access_levels:
          type: array
          description: "The access levels granted by the permission for the user or\
            \ group. Not returned by HSTS version 3.7.3 or older. Values are \"list\"\
            , \"read\", \"write\", and \"delete\"."
          example:
          - list
          - read
          - write
          - delete
          items:
            type: string
            enum:
            - list
            - read
            - write
            - delete
            - mkdir
            - rename
            - preview
        access_level:
          type: string
          description: The access level granted by the permission for the user or
            group. Returned by HSTS version 3.7.3 or older.
        tags:
          type: string
          description: User-defined or application-generated tags.
        created_by_id:
          type: string
          description: The ID of the permission creator.
          example: ASPERA_ACCESS_KEY_ADMIN
        created_at:
          type: string
          description: "Time when the permission was created, in ISO format."
          example: 2018-02-13T17:54:38Z
        last_updated_by_id:
          type: string
          description: The ID of the user who last updated the permission.
          example: ASPERA_ACCESS_KEY_ADMIN
        last_updated_at:
          type: string
          description: "Time when the permission was modified, in ISO format."
          example: 2018-02-13T17:54:38Z
    permissions-id-get-200:
      type: object
      properties:
        id:
          type: string
          description: "The file ID (same as \"file_id\"). Returned only for requests\
            \ that include embed[]=file."
          example: "1"
        file_id:
          type: string
          description: The ID of the file.
          example: "50"
        file:
          type: string
          description: "A JSON array containing the file metadata. Returned only for\
            \ requests that include embed[]=file."
          example: ""
        name:
          type: string
          description: "The file name. Returned only for requests that include embed[]=file."
        path:
          type: string
          description: "The full filepath. Returned only for requests that include\
            \ embed[]=file."
        size:
          type: string
          description: "The size of the file, symbolic link, or directory, in bytes.\
            \ Returned only for requests that include embed[]=file."
        type:
          type: string
          description: "The file type (\"file\", \"symbolic_link\", or \"folder\"\
            ). Returned only for requests that include embed[]=file."
          enum:
          - file
          - symbolic_link
          - folder
        modified_time:
          type: string
          description: "The file creation time in ISO format. Returned only for requests\
            \ that include embed[]=file."
        content_type:
          type: string
          description: "The file format, such as \"application/octet-stream\" and\
            \ \"text/plain\". Returned only for requests that include embed[]=file."
        access_id:
          type: string
          description: The user ID or group ID.
          example: aspera
        access_type:
          type: string
          description: "The access type, value is \"user\" or \"group\"."
          example: user
          enum:
          - user
          - group
        access_levels:
          type: array
          description: "The access levels granted by the permission for the user or\
            \ group. Not returned by HSTS version 3.7.3 or older. Values are \"list\"\
            , \"read\", \"write\", and \"delete\"."
          example:
          - list
          - read
          - write
          - delete
          items:
            type: string
            enum:
            - list
            - read
            - write
            - delete
            - mkdir
            - rename
            - preview
        access_level:
          type: string
          description: The access level granted by the permission for the user or
            group. Returned by HSTS version 3.7.3 or older.
        tags:
          type: string
          description: User or application-defined tags in JSON format.
        created_by_id:
          type: string
          description: The ID of the permission creator.
          example: ASPERA_ACCESS_KEY_ADMIN
        created_at:
          type: string
          description: "Time when the permission was created, in ISO format."
          example: 2018-02-13T17:54:38Z
        last_updated_by_id:
          type: string
          description: The ID of the user who last updated the permission.
          example: ASPERA_ACCESS_KEY_ADMIN
        last_updated_at:
          type: string
          description: "Time when the permission was modified, in ISO format."
          example: 2018-02-13T17:54:38Z
    permissions-id-delete-409:
      type: object
      properties:
        error:
          type: string
          description: Error response.
          example: ""
        code:
          type: string
          description: HTTP error code.
        reason:
          type: string
          description: HTTP error message.
        user_message:
          type: string
          description: Error description.
    publicKeyRequest:
      type: object
      properties:
        username:
          type: string
          description: Username associated with the key.
        public_key:
          type: string
          description: SSH public key in OpenSSH format.
    publicKeyResponse:
      type: object
      properties:
        public_key:
          type: string
          example: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/op3cPn7hANWb5/LEoqE4d855/QU9coy43U1vjJ/vqQ2tvHof5JmVvSp7SiH9k+LMtYEv57oUQS7RlMVcr57LwPv5LjpzKO2KJWeTSPrnTNgaqw4jFcRXyV4n6pY6b7t3n16TNgVBs9doiV2BkrvP7BxPkfk7702nqhi33lFgwJ3A+UtFL0PBI9Zel5G8hxdfZDowfL0i633y31OZ2DdgIt4vnpZWhR/STnay7SRguymxf4trgNdNzAOj0jMQoskfHl0vWTuzlzb7LW3JthYptf26YBPLefZVVj0EnxBOe75Z9zE5+72d1WEKRQfPmk15UFYfzzyHAcmgh2OokRUDgP5ekKiqFOHaFvcc+2GSuEBafxK+Uld8VfPMo3Awh/H9/q9j8s0ol0zFMcevoW3UqtqSgaeB/FOqV2H1jZGxH1ITGU+5pVqarNlXNvg1mtKq1G9bfb1e4mBq+IG6neLxfurQaoL5iAOeypYGXrkA7gRH3icC7DvmMSABaYt+rkwH4yOJXPEyhCfEoFb1uwZ7rp6RKhp4EgJ4GdE1+J1Y4womvxkIVlP/9oyGTVmE/6+XtpTuRGF3MOWFIT2uHyMXf/tAKoJMimDxYAQw9KVfLohUHQUicE3+UxPP7avY24XC727bYJq3Ru/9sIFISA7NZ5/6c2Ti5TWJtXRJkbQvOw== email@node.com user@host
    space-post-request:
      required:
      - paths
      type: object
      properties:
        paths:
          type: array
          description: An array of paths.
          items:
            $ref: '#/components/schemas/space-post-request-path'
    space-post-request-path:
      required:
      - path
      type: object
      properties:
        path:
          type: string
          description: The path name. Space information is returned for the mount
            point of the path.
    space-post-200:
      type: object
      properties:
        paths:
          type: array
          items:
            $ref: '#/components/schemas/space-paths'
    space-paths:
      type: object
      properties:
        path:
          type: string
          description: The path name that was queried.
        bytes_total:
          type: integer
          description: The total space in bytes of the mount point of the path.
        bytes_free:
          type: integer
          description: The free space in bytes of the mount point of the path.
        percent_free:
          type: number
          description: The percentage of the total space that is available.
    transferPostRequest:
      required:
      - direction
      - paths
      - remote_host
      - token
      type: object
      properties:
        direction:
          type: string
          description: The direction of the transfer.
        remote_host:
          type: string
          description: IP or fully qualified domain name of the remote server.
        remote_user:
          type: string
          description: Transfer user name. Default is "xfer".
        remote_password:
          type: string
          description: The password for the remote transfer user. Aspera encourages using SSH private keys instead of passwords.
        password:
          type: string
          description: "The password for the local transfer user. Required when HSTS is running on Windows and the system/transfer user associated with the Node API credentials differs from the one running asperanoded as a service on Windows Server."
        ssh_private_key:
          type: string
          description: "The contents of the transfer user's SSH private key. Required when you\ authenticate the transfer using SSH public/private\ key pair. The contents should be\ formatted into a single line string and include the header and footer (for example,\ \"-----BEGIN RSA PRIVATE KEY-----\\\
            nXXXXXXXXX\\n-----END RSA PRIVATE KEY-----\")."
        ssh_private_key_passphrase:
          type: string
          description: The passphrase associated with the transfer user's SSH private
            key.
        remote_access_key:
          type: string
          description: The access key ID of the access key that was used to construct
            the bearer token that is used to authenticate to the remote node.
        token:
          type: string
          description: "The token that authorizes access to the storage. The token\
            \ can be a basic token (value is \"Basic {token_string}\"), bearer token\
            \ (value is \"Bearer {token_string}\"), or transfer token (value is \"\
            {token_string}\")."
        source_root_id:
          type: string
          description: The file ID of the source root directory. Required when using
            Bearer token auth for the source node.
        destination_root_id:
          type: string
          description: The file ID of the destination root directory. Required when
            using Bearer token auth for the destination node.
        source_root:
          type: string
          description: The pathname of the source root directory. Not supported when
            using Bearer token auth for the source node.
        destination_root:
          type: string
          description: The pathname of the destination root directory. Not supported
            when using Bearer token auth for the destination node.
        paths:
          type: array
          items:
            $ref: '#/components/schemas/paths'
        ssh_port:
          type: integer
          description: The port that is used for the SSH connection.
        fasp_port:
          type: integer
          description: The port that is used for data transfer.
        http_fallback:
          type: boolean
          description: "If true, HTTP fallback attempts to perform an HTTP or HTTPS\
            \ transfer when a FASP transfer cannot be performed. Default: false."
        http_fallback_port:
          type: integer
          description: "The port that is used for HTTP fallback transfers. Default\
            \ is 443 if a cipher is enabled, 80 otherwise."
        https_fallback_port:
          type: integer
          description: "The port that is used for HTTPS fallback transfers. Default\
            \ is 443 if a cipher is enabled, 80 otherwise."
        cipher:
          type: string
          description: "The encryption algorithm that is used to encrypt data in transit.\
            \ Allowed values are \"none\" (\"none\" means use the remote server configuration\
            \ or the ascp default of aes-128, it does not mean \"do not encrypt\"\
            ), \"aes-128\", \"aes-192\", \"aes-256\", \"aes-128-cfb\", \"aes-192-cfb\"\
            , \"aes-256-cfb\", \"aes-128-gcm\", \"aes-192-gcm\", or \"aes-256-gcm\"\
            . Default: \"aes-128\". \"aes-192\" and \"aes-256\".\"aes-XXX-gcm\" and\ \"aes-XXX-cfb\". For more information on compatibility for client-server cipher, see\ the HSTS Admin guide for important."
        content_protection:
          type: string
          description: |
            'Enable client-side content protection (encryption-at-rest). For uploads, set to "encrypt" to transfer encrypted files and store them on the server with the extension ".aspera-env". To download and decrypt encrypted files, set to "decrypt". If "content_protection_password" is not specified, Connect prompts for the passphrase. Default: "decrypt".'
        content_protection_password:
          type: string
          description: "The passphrase for the client-side encryption-at-rest action,\
            \ if any."
        cookie:
          type: string
          description: Data to associate with the transfer. The cookie is reported
            to both client-side and server-side applications that are monitoring FASP
            transfers. Cookies are often used by applications to identify associated
            transfers.
        rate_policy:
          type: string
          description: "The transfer rate policy to use when sharing bandwidth. Value\
            \ is: \"high\" (when sharing bandwidth, transfer at twice the rate of\
            \ a transfer using a fair policy), \"fair\" (default, share bandwidth\
            \ equally with other traffic), \"low\" (use only unused bandwidth),  \"\
            fixed\" (transfer at the target rate, regardless of the actual network\
            \ capacity and do not share bandwidth). Aspera encourages that you do\
            \ not use \"fixed\" except under special circumstances, otherwise the\
            \ destination storage can be damaged."
        symlink_policy:
          type: string
          description: "Handle symbolic links using the specified method, as allowed\
            \ by the server. Value is: \"follow\" (default,\
            \ follow a symbolic link and transfer the contents of the linked file\
            \ or directory as long as the link target is in the user's docroot), \"\
            copy\" (copy only the symbolic link. If a file with the same name exists\
            \ at the destination, the symbolic link does not replace the file. If\
            \ the server symbolic link handling configuration in aspera.conf does\
            \ not include \"create\", then symbolic links are skipped (the default\
            \ server configuration is \"create,follow\").), \"copy+force\" (copy only\
            \ the symbolic link. If a file with the same name exists at the destination,\
            \ the symbolic link replaces the file. If the file of the same name at\
            \ the destination is a symbolic link to a directory, it is not replaced.\
            \ If the server symbolic link handling configuration in aspera.conf does\
            \ not include \"create\", then symbolic links are skipped (the default\
            \ server configuration is \"create,follow\").), \"skip\" (skip symbolic\
            \ links. Neither the link nor the file to which it points are transferred.\
            \ This is the only option allowed when the transfer destination is a Windows\
            \ server)."
        tags:
          $ref: '#/components/schemas/transferRequestAspera'
        target_rate_kbps:
          type: integer
          description: |
            The target rate for the transfer, in Kbps. If there is competing network traffic, FASP may share this bandwidth, depending on the "rate_policy" value you set. Default is the target rate default value in the local server's configuration file (aspera.conf). Respects both local- and remote target rate caps, if set. Must be provided when you set a value for "target_rate_cap_kbps".
        target_rate_cap_kbps:
          type: integer
          description: "Upper limit of target rate, in Kbps. Default is no limit."
        title:
          type: string
          description: A name for the transfer.
        overwrite:
          type: string
          description: "The overwrite policy when source and destination files have\
            \ the same name. Value is: \"never\" (never overwrite a destination file),\
            \ \"always\" (always overwrite a destination file), \"diff\" (overwrite\
            \ the destination file if it is different from the source file), \"older\"\
            \ (overwrite the destination file if its timestamp is older than the source\
            \ file), or \"diff+older\" (overwrite the destination file it is older\
            \ and different from the source file."
        resume_policy:
          type: string
          description: "The resume policy for partially transferred files. Value is:\
            \  \"none\" (transfer the entire file again), \"attrs\" (resume transfer\
            \ if the attributes of the source and the partial files match), \"sparse_csum\"\
            \ (resume transfer if the attributes and sparse (fast) checksums of the\
            \ source and partial files match), or \"full_csum\" (resume transfer if\
            \ the attributes and full checksums of the source and partial files match).\
            \ Note - Calculating full checksums of large files takes a long time and\
            \ requires more CPU. Default is \"sparse_csum\""
        create_dir:
          type: boolean
          description: "If true, create directories on the destination if they don't\
            \ exist. When enabling this option, the destination path is assumed to\
            \ be a directory path."
        precalculate_job_size:
          type: boolean
          description: "If true, calculate the job size before transfer. If you are\
            \ transferring a large number of files this can take a long time. Precalculating\
            \ job size gives better feedback regarding the percent of the transfer\
            \ that has completed. Default is false."
        use_ascp4:
          type: boolean
          description: |
            If true, transfer with ascp4 instead of ascp. Default is false. Usage notes - 1) ascp4 does not prepend the docroot to the source file. For source paths, specify the full path to the source file. 2) ascp4 does not support values for *destination*. To specify a destination directory, use "destination_root_id". 3) ascp4 does not support all of the same transfer options as ascp. For a complete comparison, see the IBM Aspera High-Speed Transfer Server Admin Guide.
        delete_source:
          type: boolean
          description: "If true, remove empty directories and the source after they\
            \ are successfully transferred. Default is false."
        delete_before_transfer:
          type: boolean
          description: "If true, delete any files that exist at the destination but\
            \ not at the source before transfer. Default is false."
        move_after_transfer:
          type: string
          description: The relative path to which the files will be moved after the
            transfer at the source side.
        remove_after_transfer:
          type: boolean
          description: "If true, remove source files, but not their parent directory,\
            \ after they are successfully transferred. Default is false. This is useful\
            \ for workflows in which once a file is transferred it is no longer needed\
            \ at the source."
        remove_empty_directories:
          type: boolean
          description: "If true, remove empty directories after the files within them\
            \ are successfully transferred. Default is false."
        preserve_times:
          type: boolean
          description: Preserve file timestamps. Default is false.
        preserve_access_time:
          type: boolean
          description: "If true, preserve file access time from the source to the\
            \ destination."
        preserve_modification_time:
          type: boolean
          description: "If true, preserve file modification time from the source to\
            \ the destination."
        preserve_creation_time:
          type: boolean
          description: "If true, preserve file creation time from the source to the\
            \ destination. Only Windows systems retain information about creation\
            \ time."
        preserve_file_owner_uid:
          type: boolean
          description: "If true, preserve the user identifier from the source to the\
            \ destination."
        preserve_file_owner_gid:
          type: boolean
          description: "If true, preserve the group identifier from the source to\
            \ the destination."
        exclude_older_than:
          type: string
          description: "Exclude files, not directories, from the transfer if they\
            \ are older than the specified time. Time is specified as number of seconds\
            \ after the source computer's epoch. Prepend - to specify a timestamp\
            \ relative to the current time. Examples:\
            \ \"exclude_older_than\":\"-86400\" to exclude files older than 24 hours from the current time.\
            \ \"exclude_older_than\":\"1663811521\" to exclude files older September 21, 2022 01:52:01 GMT."
        exclude_newer_than:
          type: string
          description: "Exclude files, not directories, from the transfer if they\
            \ are newer than the specified time. Time is specified as number of seconds\
            \ after the source computer's epoch.  Prepend - to specify a timestamp\
            \ relative to the current time. Examples:\
            \ \"exclude_newer_than\":\"-86400\" to exclude files newer than 24 hours from the current time.\
            \ \"exclude_newer_than\":\"1663811521\" to exclude files newer than September 21, 2022 01:52:01 GMT."
        preserve_xattrs:
          type: string
          description: native or metafile.  This option transfers the extended attributes
        remote_preserve_xattrs:
          type: string
          description: native or metafile.  This option transfers the extended attributes
        preserve_acls:
          type: string
          description: native or metafile.  This option transfers the access control
            lists
        remote_preserve_acls:
          type: string
          description: native or metafile.  This option transfers the access control
            lists
        multi_session:
          type: integer
          description: The number of simultaneous transfer sessions allowed.
          example: 4
        multi_session_threshold:
          type: integer
          description: The file size above which files are split across sessions.
        wss_enabled:
          type: boolean
          description: "If true, enables a websocket transfer in lieu of SSH."
        wss_cert_auth_path:
          type: string
          description: The optional pathname of the certificate authority file for
            websocket enabled transfer.
        proxy:
          type: string
          description: "The URL of the proxy server with the format dnat[s]://{proxy_username}:{proxy_password}@{ip_address}[:{port}].\
            \ By default, the DNAT port is 9091 and the DNATS port is 9092."
        remove_skipped:
          type: boolean
          description: "Must also have remove_after_transfer set to true, Defaults\
            \ to false, if true, skipped files will be removed as well."
        file_checksum:
          type: string
          description: "It can be one of: none, sha-512, sha-384, sha-256, sha1, md5.\
            \  Calculate and record file hash values using the specified hash function.\
            \ This is introduced in HSTS 4.0."
        src_base:
          type: string
          description: Specify the prefix to be stripped off from each source object.  The
            remaining portion of the source path is kept intact at the destination.
            Special care must be taken when used with cloud storage.
        compression:
          type: string
          description: "Compress file data inline. Default: lz4.  If set to zlib,\
            \ --compression-hint can be used to set the compression level, only available\
            \ with use_ascp4 set to true."
        filters:
          type: array
          description: This is introduced in HSTS 4.0.
          items:
            $ref: '#/components/schemas/transferFilters'
        dgram_size:
          type: integer
          description: "The datagram size that is used for the transfer, as configured\
            \ in aspera.conf on the server."
        read_block_size:
          type: integer
          description: "The file read block size, in bytes."
        write_block_size:
          type: integer
          description: "The file write block size, in bytes."
        min_rate_kbps:
          type: integer
          description: "The minimum transfer rate, in Kbps."
          example: 0
        read_threads:
          type: number
          description: "Number of storage \"read\" threads (sender only).  Default\
            \ 2, only available when use_ascp4 is true"
        write_threads:
          type: number
          description: "Number of storage \"write\" threads (receiver only).  Default\
            \ 2. For transfers to object or HDFS storage, write threads cannot exceed\
            \ the maximum number of jobs that are configured for Trapd. Default 15,\
            \ only available when use_ascp4 is true."
      description: The request body for a transfer.
    transferPutRequest:
      type: object
      properties:
        status:
          type: string
          description: "The new value for the status. To cancel a transfer, set to\
            \ \"canceled\", \"cancelled\", or \"stopped\". To pause a transfer, set\
            \ to \"paused\". To resume a paused transfer, set to \"running\" or \"\
            resume\"."
        target_rate_kbps:
          type: number
          description: "The new target transfer rate, in Kbps."
        min_rate_kbps:
          type: number
          description: "The new minimum transfer rate, in Kbps."
        rate_policy:
          type: string
          description: "The new rate policy to apply to the transfer. Allowed values\
            \ are \"fixed\", \"high\", \"fair\", or \"low\"."
      description: The transfer settings that can be modified for an active transfer.
    transferRequestAspera:
      type: object
      properties:
        aspera:
          $ref: '#/components/schemas/transferRequestAsperaTags'
      description: Tags added by Aspera applications or the Node API user.
    transferRequestAsperaTags:
      type: object
      properties:
        xfer_retry:
          type: integer
          description: Override for ascp's --retry-timeout option
        usage_id:
          type: string
          description: Assign a usage ID to the transfer in order to query transfer
            usage (bytes transferred) with the /usage endpoint.
    transferResponseSpec:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the transfer (same as "id").
        title:
          type: string
          description: "Name of the transfer, if any."
        tags:
          $ref: '#/components/schemas/transferResponseAspera'
        token:
          type: string
          description: The transfer authorization token.
        cookie:
          type: string
          description: The cookie generated by the application or provided in the
            POST request.
        direction:
          type: string
          description: The direction of the transfer.
        remote_host:
          type: string
          description: IP or fully qualified domain name of the remote server.
        remote_user:
          type: string
          description: Transfer user name.
        remote_access_key:
          type: string
          description: Remote access key for the transfer.
        source_root:
          type: string
          description: The file ID of the source root directory.
        destination_root:
          type: string
          description: The file ID of the destination root directory.
        fasp_port:
          type: integer
          description: The port that is used for data transfer.
        ssh_port:
          type: integer
          description: The port that is used for the SSH connection.
        rate_policy:
          type: string
          description: The transfer's rate policy.
        target_rate_kbps:
          type: string
          description: "The target rate for the transfer, in Kbps."
        cipher:
          type: string
          description: The encryption algorithm that is used to encrypt data in transit.
        content_protection:
          type: string
          description: "The client-side encryption-at-rest action, encrypt or decrypt."
        content_protection_password:
          type: string
          description: "The passphrase for the client-side encryption-at-rest action,\
            \ if any."
        overwrite:
          type: string
          description: The overwrite policy.
        resume_policy:
          type: string
          description: The resume policy.
        symlink_policy:
          type: string
          description: The symlink policy.
        create_dir:
          type: boolean
          description: "If true, create directories on the destination if they do\
            \ not exist."
        precalculate_job_size:
          type: boolean
          description: "If true, calculate the job size before transfer."
        delete_source:
          type: boolean
          description: "If true, remove empty directories and the source after they\
            \ are successfully transferred."
        remove_after_transfer:
          type: boolean
          description: "If true, remove source files, but not their parent directory,\
            \ after they are successfully transferred."
        remove_empty_directories:
          type: boolean
          description: "If true, remove empty directories after the files within them\
            \ are successfully transferred."
        multi_session:
          type: integer
          description: The number of simultaneous transfer sessions allowed.
          example: 4
        multi_session_threshold:
          type: integer
          description: "The file size, in bytes, above which files are split across\
            \ sessions."
        file_checksum:
          type: string
          description: "It can be one of: none, sha-512, sha-384, sha-256, sha1, md5.\
            \  Calculate and record file hash values using the specified hash function.\
            \ This is introduced in HSTS 4.0."
        src_base:
          type: string
          description: Specify the prefix to be stripped off from each source object.  The
            remaining portion of the source path is kept intact at the destination.
            Special care must be taken when used with cloud storage.
        delete_before_transfer:
          type: boolean
          description: "If true, delete any files that exist at the destination but\
            \ not at the source before transfer."
        preserve_access_time:
          type: boolean
          description: "If true, preserve file access time from the source to the\
            \ destination."
        preserve_modification_time:
          type: boolean
          description: "If true, preserve file modification time from the source to\
            \ the destination."
        preserve_creation_time:
          type: boolean
          description: "If true, preserve file creation time from the source to the\
            \ destination. Only Windows systems retain information about creation\
            \ time."
        preserve_file_owner_uid:
          type: boolean
          description: "If true, preserve the user identifier from the source to the\
            \ destination."
        preserve_file_owner_gid:
          type: boolean
          description: "If true, preserve the group identifier from the source to\
            \ the destination."
        preserve_xattrs:
          type: string
          description: native or metafile.  This option transfers the extended attributes
        remote_preserve_xattrs:
          type: string
          description: native or metafile.  This option transfers the extended attributes
        preserve_acls:
          type: string
          description: native or metafile.  This option transfers the access control
            lists
        remote_preserve_acls:
          type: string
          description: native or metafile.  This option transfers the access control
            lists
        use_ascp4:
          type: boolean
          description: "If true, transfer with ascp4 instead of ascp."
      description: The transfer metadata returned for a transfer.
    transferResponseSessionSpec:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the transfer (same as "id").
        status:
          type: string
          description: "The status of the transfer. Possible transfer states: \"waiting\"\
            , \"running\", \"completed\", \"failed\", \"partially_completed\", \"\
            canceled\", or \"paused\"."
          enum:
          - waiting
          - running
          - completed
          - failed
          - partially_completed
          - canceled
          - paused
        start_spec:
          $ref: '#/components/schemas/transferResponseStartSpec'
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/transferResponseSessions'
        bytes_transferred:
          type: integer
          description: The total number of bytes transferred across all sessions.
        bytes_written:
          type: integer
          description: The total number of bytes written across all sessions.
        bytes_lost:
          type: integer
          description: The total number of bytes lost across all sessions.
        avg_rate_kbps:
          type: number
          description: The average transfer rate across all sessions.
        files_completed:
          type: integer
          description: The number of files that are transferred across all sessions.
        directories_completed:
          type: integer
          description: The number of directories that are transferred across all sessions.
        start_time_usec:
          type: integer
          description: "The start time of the transfer sessions, relative to the server's\
            \ epoch."
        end_time_usec:
          type: integer
          description: "The time when all transfer sessions complete, relative to\
            \ the server's epoch."
        elapsed_usec:
          type: integer
          description: The total microseconds for all transfer sessions to complete.
        error_code:
          type: string
          description: The error code for any transfer session.
        error_desc:
          type: string
          description: The error description for any transfer session.
        files:
          type: array
          items:
            $ref: '#/components/schemas/fileMetadata'
      description: The transfer session metadata returned for a transfer.
    transferResponseAspera:
      type: object
      properties:
        aspera:
          $ref: '#/components/schemas/transferResponseAsperaTags'
      description: Tags added by Aspera applications or the user.
    transferResponseAsperaTags:
      type: object
      properties:
        xfer_id:
          type: string
          description: Unique ID of the transfer
        xfer_retry:
          type: integer
          description: Override for ascp's --retry-timeout option
        usage_id:
          type: string
          description: Assign a usage ID to the transfer in order to query transfer
            usage (bytes transferred) with the /usage endpoint.
    transferResponseStartSpec:
      type: object
      properties:
        source_paths:
          type: array
          description: List of source file paths
          items:
            type: string
        destination_path:
          type: string
          description: The target path.
        tags:
          $ref: '#/components/schemas/transferResponseAspera'
        cookie:
          type: string
          description: The cookie generated by the application or provided in the
            POST request.
        client_token_user_id:
          type: string
          description: "If the local node provides a token, the username associated\
            \ with the token."
        server_token_user_id:
          type: string
          description: "If the remote node provides a token, the username associated\
            \ with the token."
        client_access_key:
          type: string
          description: "The access key ID of the access key that is provided to the\
            \ local node, if any."
        server_access_key:
          type: string
          description: "The access key ID of the access key that is provided to the\
            \ remote node, if any."
        client_cluster_id:
          type: string
          description: The client cluster id.
        server_cluster_id:
          type: string
          description: The server cluster id.
        direction:
          type: string
          description: The direction of the transfer.
        endpoint:
          type: string
          description: |
            If the transfer direction is "send", value is "client". If the transfer direction is "recv", value is "server".
        token_type:
          type: string
          description: "The token type, values can be \"none\", \"unset\", \"error\"\
            , \"basic_token\", \"bearer_token\", \"auth_token\", \"access_key_auth_token\"\
            . This is introduced in HSTS 4.0."
        remote_host:
          type: string
          description: IP or fully qualified domain name of the remote server.
        remote_user:
          type: string
          description: Transfer user name.
        fasp_port:
          type: integer
          description: The port that is used for data transfer.
        ssh_port:
          type: integer
          description: The port that is used for the SSH connection.
        dgram_size:
          type: integer
          description: "The datagram size that is used for the transfer, as configured\
            \ in aspera.conf on the server."
        read_block_size:
          type: integer
          description: "The file read block size, in bytes."
        write_block_size:
          type: integer
          description: "The file write block size, in bytes."
        wss_enabled:
          type: boolean
          description: "If true, enable the web socket transfer service. This is introduced\
            \ in HSTS 4.0."
        number_of_parts:
          type: number
          description: number of parts for a multi_session transfer
        rate_policy:
          type: string
          description: The rate policy of the transfer.
        target_rate_kbps:
          type: integer
          description: "The target rate for the transfer, in Kbps."
        min_rate_kbps:
          type: integer
          description: The minimum transfer rate.
        vlink_id:
          type: string
          description: The ID of the virtual link (bandwidth control) that is applied
            to the transfer.
        cipher:
          type: string
          description: The encryption algorithm that is used to encrypt data in transit.
        keepalive:
          type: boolean
          description: "If true, transfer in persistent mode."
        http_fallback:
          type: boolean
          description: "If true, HTTP fallback attempts to perform an HTTP or HTTPS\
            \ transfer when a FASP transfer cannot be performed. Default is false."
        http_fallback_port:
          type: integer
          description: "The port that is used for HTTP fallback transfers. Default\
            \ is 443 if a cipher is enabled, 80 otherwise."
        https_fallback_port:
          type: integer
          description: "The port that is used for HTTPS fallback transfers. Default\
            \ is 443 if a cipher is enabled, 80 otherwise."
        proxy:
          type: string
          description: "The URL of the proxy server with the format dnat[s]://{proxy_username}:{proxy_password}@{ip_address}[:{port}].\
            \ By default, the DNAT port is 9091 and the DNATS port is 9092."
        create_dir:
          type: boolean
          description: "If true, create directories on the destination if they do\
            \ not exist."
        overwrite_policy:
          type: string
          description: The overwrite policy.
        resume_policy:
          type: string
          description: The resume policy.
        lock_target_rate:
          type: boolean
          description: "If true, the target transfer rate is locked by the remote\
            \ node."
        lock_min_rate:
          type: boolean
          description: "If true, the minimum transfer rate is locked by the remote\
            \ node."
        lock_rate_policy:
          type: boolean
          description: "If true, the rate policy is locked by the remote node."
        target_rate_percentage:
          type: integer
          description: The target rate percentage that is set on the server.
        precalc_enabled:
          type: boolean
          description: "If true, job size is calculated before transfer."
        preserve_xattrs:
          type: string
          description: native or metafile.  This option transfers the extended attributes
        remote_preserve_xattrs:
          type: string
          description: native or metafile.  This option transfers the extended attributes
        preserve_acls:
          type: string
          description: native or metafile.  This option transfers the access control
            lists
        remote_preserve_acls:
          type: string
          description: native or metafile.  This option transfers the access control
            lists
        source_root_id:
          type: string
          description: The file ID of the source root directory. Required when using
            Bearer token auth for the source node.
        destination_root_id:
          type: string
          description: The file ID of the destination root directory. Required when
            using Bearer token auth for the destination node.
        filters:
          $ref: '#/components/schemas/filesBrowseFilters'
    transferResponseSessions:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the transfer.
        client_node_id:
          type: string
          description: Local node ID.
        server_node_id:
          type: string
          description: Remote node ID.
        client_ip_address:
          type: string
          description: The IP address of the local node.
        server_ip_address:
          type: string
          description: The IP address of the remote node.
        status:
          type: string
          description: "The status of the session. Value is \"running\", \"completed\"\
            , or \"failed\"."
        retry_timeout:
          type: integer
          description: The retry timeout set on the server.
        retry_count:
          type: integer
          description: The number of retries for the session.
        start_time_usec:
          type: integer
          description: Transfer session start time in microseconds since the server's
            epoch time.
        end_time_usec:
          type: integer
          description: Transfer session start time in microseconds since the server's
            epoch time.
        elapsed_usec:
          type: integer
          description: "The duration of the transfer session, in microseconds."
        bytes_transferred:
          type: integer
          description: The number of bytes transferred in the session.
        bytes_written:
          type: integer
          description: The number of bytes written in the session.
        stalled:
          type: boolean
          description: On a running transfer, indicates when the transfer temporarily stops progress.
        bytes_lost:
          type: integer
          description: The number of bytes lost in the session.
        files_completed:
          type: integer
          description: The number of files transferred in the session.
        directories_completed:
          type: integer
          description: The number of directories transferred in the session.
        source_statistics:
          type: object
          description: "The statistics corresponding to the ascp logging that shows details about the transferred files."
          $ref: '#/components/schemas/sourceStatistics'
        target_rate_kbps:
          type: number
          description: The target transfer rate for the session.
        min_rate_kbps:
          type: number
          description: The minimum transfer rate for the session.
        calc_rate_kbps:
          type: number
          description: The calculated transfer rate for the session.
        network_delay_usec:
          type: integer
          description: The network delay in microseconds.
        avg_rate_kbps:
          type: number
          description: The average transfer rate for the session.
        error_code:
          type: integer
          description: "The error code for the session, if any."
        error_desc:
          type: string
          description: "A description of the session error, if any."
        precalc:
          $ref: '#/components/schemas/precalcTransfer'
    transferFilters:
      type: object
      properties:
        include:
          type: string
          description: Include paths that match the pattern
        exclude:
          type: string
          description: Exclude paths that match the pattern
      description: "In order to filter directories and files to be transferred, their\
        \ names are matched against patterns (globs) that include wildcards and special\
        \ characters. The patterns use the standard globbing syntax found in UNIX\
        \ systems as well as several Aspera extensions to the standard. Refer\
        \ to ascp man page for more details."
    precalcTransfer:
      type: object
      properties:
        enabled:
          type: boolean
          description: "If true, transfer precalculation is enabled. If false, all\
            \ precalculation values are reported as \"0\"."
        status:
          type: string
          description: The status of the precalculation job.
        bytes_expected:
          type: integer
          description: The number of bytes that will be transferred by the session.
        directories_expected:
          type: integer
          description: The number of directories that will be transferred by the session.
        files_expected:
          type: integer
          description: The number of files that will be transferred by the session.
        files_excluded:
          type: integer
          description: The number of files that will be filtered from the source paths.
        files_special:
          type: integer
          description: "The number of files that are not ordinary files, such as symbolic\
            \ links."
        files_failed:
          type: integer
          description: The number of files that could not be pre-calculated.
    bandwidthResponse:
      type: object
      properties:
        current_time:
          type: string
          description: Current time in ISO format.
        start_time:
          type: string
          description: "The time that bandwidth data starts, in ISO format."
        end_time:
          type: string
          description: "The time that bandwidth data ends, in ISO format."
        send:
          $ref: '#/components/schemas/bandwidthTransfers'
        receive:
          $ref: '#/components/schemas/bandwidthTransfers'
    bandwidthTransfers:
      type: object
      properties:
        transfers:
          type: array
          items:
            $ref: '#/components/schemas/bandwidthTransferData'
        max_left:
          type: number
          description: The first value that is reported for time for the specific
            transfer session.
        min_right:
          type: number
          description: The last value that is reported for time for the specific transfer
            session.
    bandwidthTransferData:
      type: object
      properties:
        id:
          type: string
          description: The transfer ID.
        data:
          type: array
          items:
            $ref: '#/components/schemas/bandwidthTimeRate'
        last_time:
          type: string
          description: "The actual time for the last bandwidth data point, in ISO\
            \ format."
        max_rate:
          type: number
          description: "The maximum transfer rate during the reported duration, in\
            \ Kbps."
    bandwidthTimeRate:
      type: object
      properties:
        time:
          type: number
          description: The number of seconds since the start time.
        rate:
          type: number
          description: "The transfer rate, in Kbps."
    usage-get-200:
      type: object
      properties:
        id:
          type: string
          description: "The usage ID, as set in the transfer request."
        bytes_in:
          type: integer
          description: The number of bytes downloaded by the usage ID.
        bytes_out:
          type: integer
          description: The number of bytes uploaded by the usage ID.
        bytes_total:
          type: integer
          description: The total number of bytes transferred by the usage ID.
    usage-id-get-200:
      type: object
      properties:
        id:
          type: string
          description: "The usage ID, as set in the transfer request."
        bytes_in:
          type: integer
          description: The number of bytes downloaded by the usage ID.
        bytes_out:
          type: integer
          description: The number of bytes uploaded by the usage ID.
        bytes_total:
          type: integer
          description: The total number of bytes transferred by the usage ID.
    sourceStatistics:
      type: object
      properties:
        args_scan_attempted:
          type: integer
          description: "Number of arguments that the scan attempted."
        args_scan_completed:
          type: integer
          description: "Number of arguments that the scan completed."
        paths_scan_attempted:
          type: integer
          description: "Number of paths that the scan attempted."
        paths_scan_failed:
          type: integer
          description: "Number of paths that failed during the scan."
        paths_scan_skipped:
          type: integer
          description: "Number of paths that the scan skipped."
        paths_scan_excluded:
          type: integer
          description: "Number of paths that the scan excluded."
        dirs_scan_completed:
          type: integer
          description: "Number of directories for which the scan was done."
        files_scan_completed:
          type: integer
          description: "Number of files for which the scan was done."
        dirs_xfer_attempted:
          type: integer
          description: "Number of directories for which the transfer was attempted."
        dirs_xfer_fail:
          type: integer
          description: "Number of directories for which the transfer failed."
        files_xfer_attempted:
          type: integer
          description: "Number of files for which the transfer was attempted."
        files_xfer_fail:
          type: integer
          description: "Number of files for which the transfer failed."
        files_xfer_noxfer:
          type: integer
          description: "Number of files with 0-byte size that were neither transferred nor overwritten."
    files-du:
      type: object
      properties:
        path:
          type: integer
          description: "The full path to get the counts."
          example: "/full/path"
        total_size:
          type: integer
          description: "The size of the file and directories that are in the path."
        file_count:
          type: integer
          description: "The number of files."
        dir_count:
          type: integer
          description: "The number of directories."
        special_count:
          type: integer
          description: "The number of special directories such as device files, fifo, sockets, etc."
        failed_count:
          type: integer
          description: "The number of failed counts."
  securitySchemes:
    basicAuth:
      type: http
      description: "Aspera access key, basic token, or for requests to self-managed nodes, Node API credentials."
      scheme: basic
    bearerAuth:
      type: http
      description: "For requests that required an Aspera bearer token for authentication."
      scheme: bearer
      bearerFormat: JWT
